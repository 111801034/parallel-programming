UpdateRowCalled
updRow: Hello This is India.: 20
UpdateRowCalled
updRow: Hello This is America.: 22
UpdateRowCalled
updRow: Hello This is Japan.: 20
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #include <bits/stdc++.h>: 24
UpdateRowCalled
updRow: #include <unistd.h>: 19
UpdateRowCalled
updRow: #include <sys/ioctl.h>: 22
UpdateRowCalled
updRow: #include <termios.h>: 20
UpdateRowCalled
updRow: #include <fcntl.h>: 18
UpdateRowCalled
updRow: #include <string.h>: 19
UpdateRowCalled
updRow: #include <stdarg.h>: 19
UpdateRowCalled
updRow: #include <malloc.h>: 19
UpdateRowCalled
updRow: #include <time.h>: 17
UpdateRowCalled
updRow: #include <stdlib.h>: 19
UpdateRowCalled
updRow: #include "typeDefinition.h": 27
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: using namespace std;: 20
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: typedef vector<int> vi;: 23
UpdateRowCalled
updRow: #define ABUF_INIT {NULL, 0}: 27
UpdateRowCalled
updRow: #define KILO_VERSION "0.0.1": 28
UpdateRowCalled
updRow: #define KILO_TAB_STOP 8: 23
UpdateRowCalled
updRow: #define KILO_QUIT_TIMES 3: 25
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #define HL_HIGHLIGHT_NUMBERS (1<<0): 35
UpdateRowCalled
updRow: #define HL_HIGHLIGHT_STRINGS (1<<1): 35
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: editorConfig E;: 15
UpdateRowCalled
updRow: const char *filename1 = "temp.txt";: 35
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: const char *C_HL_extensions[] = { ".c", ".h", ".cpp", NULL };: 61
UpdateRowCalled
updRow: const char *C_HL_keywords[] = {: 31
UpdateRowCalled
updRow:   "switch", "if", "while", "for", "break", "continue", "return", "else",: 72
UpdateRowCalled
updRow:   "struct", "union", "typedef", "static", "enum", "class", "case",: 66
UpdateRowCalled
updRow:   "int|", "long|", "double|", "float|", "char|", "unsigned|", "signed|",: 72
UpdateRowCalled
updRow:   "void|", NULL: 15
UpdateRowCalled
updRow: };: 2
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: editorSyntax HLDB[] = {: 23
UpdateRowCalled
updRow:   {: 3
UpdateRowCalled
updRow:     "c",: 8
UpdateRowCalled
updRow:     C_HL_extensions,: 20
UpdateRowCalled
updRow:     C_HL_keywords,: 18
UpdateRowCalled
updRow:     "//", "/*", "*/",: 21
UpdateRowCalled
updRow:     HL_HIGHLIGHT_NUMBERS | HL_HIGHLIGHT_STRINGS: 47
UpdateRowCalled
updRow:   },: 4
UpdateRowCalled
updRow: };: 2
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #define HLDB_ENTRIES (sizeof(HLDB) / sizeof(HLDB[0])): 53
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorSetStatusMessage(const char *fmt, ...);: 50
UpdateRowCalled
updRow: void editorRefreshScreen();: 27
UpdateRowCalled
updRow: char *editorPrompt(const char *prompt, void (*callback)(char *, int));: 70
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: FILE *fp1 = fopen(filename1, "w+");: 35
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #define CTRL_KEY(k) ((k)&0x1f): 30
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: char *editorRowsToString(int *buflen){: 38
UpdateRowCalled
updRow:     int totlen = 0;: 19
UpdateRowCalled
updRow:     int j;: 10
UpdateRowCalled
updRow:     for(j = 0; j < E.numrows; j++){: 35
UpdateRowCalled
updRow:         totlen += E.row[j].size + 1;: 36
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     *buflen = totlen;: 21
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     char *buf = (char *)malloc(totlen);: 39
UpdateRowCalled
updRow:     char *p = buf;: 18
UpdateRowCalled
updRow:     for(j = 0; j < E.numrows; j++){: 35
UpdateRowCalled
updRow:         memcpy(p, E.row[j].chars, E.row[j].size);: 49
UpdateRowCalled
updRow:         p+= E.row[j].size;: 26
UpdateRowCalled
updRow:         *p = '\n';: 18
UpdateRowCalled
updRow:         p++;: 12
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     return buf;: 15
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorMoveCursor(int key) {: 32
UpdateRowCalled
updRow:     erow *row = (E.cy >= E.numrows)? NULL : &E.row[E.cy];: 57
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     switch (key) {: 18
UpdateRowCalled
updRow:         case ARROW_LEFT:: 24
UpdateRowCalled
updRow:             if(E.cx != 0){: 26
UpdateRowCalled
updRow:                 E.cx--;: 23
UpdateRowCalled
updRow:             }else if(E.cy > 0){: 31
UpdateRowCalled
updRow:                 E.cy--;: 23
UpdateRowCalled
updRow:                 E.cx = E.row[E.cy].size;: 40
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         case ARROW_RIGHT:: 25
UpdateRowCalled
updRow:             fprintf(fp1, "%s: %d %d\n", : 40
UpdateRowCalled
updRow:                         row->chars, row->size, E.cx);: 53
UpdateRowCalled
updRow:             if(row && E.cx < row->size){: 40
UpdateRowCalled
updRow:                 const char *temp = "rightArr";: 46
UpdateRowCalled
updRow:                 fprintf(fp1, "%s: %d\n", temp, E.cy);: 53
UpdateRowCalled
updRow:                 E.cx++;: 23
UpdateRowCalled
updRow:             }else if(row && E.cx == row->size){: 47
UpdateRowCalled
updRow:                 E.cy ++;: 24
UpdateRowCalled
updRow:                 E.cx = 0;: 25
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         case ARROW_UP:: 22
UpdateRowCalled
updRow:             if(E.cy != 0){ : 27
UpdateRowCalled
updRow:                 E.cy--;: 23
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         case ARROW_DOWN:: 24
UpdateRowCalled
updRow:             if(E.cy < E.numrows){: 33
UpdateRowCalled
updRow:                 E.cy++;: 23
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     row = (E.cy >= E.numrows) ? NULL : &E.row[E.cy];: 52
UpdateRowCalled
updRow:     int rowlen = row ? row->size : 0;: 37
UpdateRowCalled
updRow:     if(E.cx > rowlen){: 22
UpdateRowCalled
updRow:         E.cx = rowlen;: 22
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int editorRowCxToRx(erow *row, int cx){: 39
UpdateRowCalled
updRow:     int rx = 0;: 15
UpdateRowCalled
updRow:     int j;: 10
UpdateRowCalled
updRow:     fprintf(fp1, "cxTorx: %d\n", cx);: 37
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     for(j = 0; j < cx; j++){: 28
UpdateRowCalled
updRow:         if(row->chars[j] == '\t'){: 34
UpdateRowCalled
updRow:             rx += (KILO_TAB_STOP - 1) - (rx % KILO_TAB_STOP);: 61
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         rx++;: 13
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     return rx;: 14
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int editorRowRxToCx(erow *row, int rx){: 39
UpdateRowCalled
updRow:     int cur_rx = 0;: 19
UpdateRowCalled
updRow:     int cx;: 11
UpdateRowCalled
updRow:     for(cx = 0; cx < row->size; cx++){: 38
UpdateRowCalled
updRow:         if(row->chars[cx] == '\t'): 34
UpdateRowCalled
updRow:             cur_rx += (KILO_TAB_STOP - 1) - (cur_rx % KILO_TAB_STOP);: 69
UpdateRowCalled
updRow:         cur_rx++;: 17
UpdateRowCalled
updRow:         if (cur_rx > rx) return cx;: 35
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     return cx;: 14
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void abAppend(abuf *ab, const char *s, int len1){: 49
UpdateRowCalled
updRow:     char *new_ptr = (char *)realloc(ab->b, ab->len + len1);: 59
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if(new_ptr == NULL){: 24
UpdateRowCalled
updRow:         return;: 15
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     memcpy(new_ptr + (ab->len), s, len1);: 41
UpdateRowCalled
updRow:     ab->b = new_ptr;: 20
UpdateRowCalled
updRow:     ab->len += len1;: 20
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void abFree(abuf *ab){: 22
UpdateRowCalled
updRow:     free(ab->b);: 16
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void die(const char *s): 23
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     write(STDOUT_FILENO, "\x1b[2J", 4);: 39
UpdateRowCalled
updRow:     write(STDOUT_FILENO, "\x1b[H", 3);: 38
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     perror(s);: 14
UpdateRowCalled
updRow:     exit(1);: 12
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int32_t editorReadKey(): 23
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     int nread;: 14
UpdateRowCalled
updRow:     char c;: 11
UpdateRowCalled
updRow:     while ((nread = read(STDIN_FILENO, &c, 1)) != 1): 52
UpdateRowCalled
updRow:     {: 5
UpdateRowCalled
updRow:         if (nread == -1 && errno != EAGAIN): 43
UpdateRowCalled
updRow:             die("read");: 24
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if(c == '\x1b'){: 20
UpdateRowCalled
updRow:         char seq[3];: 20
UpdateRowCalled
updRow:         if (read(STDIN_FILENO, &seq[0], 1) != 1) return '\x1b';: 63
UpdateRowCalled
updRow:         if (read(STDIN_FILENO, &seq[1], 1) != 1) return '\x1b';: 63
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         if(seq[0] == '['){: 26
UpdateRowCalled
updRow:             if(seq[1] >= '0' && seq[1] <= '9'){: 47
UpdateRowCalled
updRow:                 if(read(STDIN_FILENO, &seq[2], 1) != 1) return '\x1b';: 70
UpdateRowCalled
updRow:                 if(seq[2] == '~'){: 34
UpdateRowCalled
updRow:                     switch(seq[1]){: 35
UpdateRowCalled
updRow:                         case '1': return HOME_KEY;: 50
UpdateRowCalled
updRow:                         case '3': return DEL_KEY;: 49
UpdateRowCalled
updRow:                         case '4': return END_KEY;: 49
UpdateRowCalled
updRow:                         case '5': return PAGE_UP;: 49
UpdateRowCalled
updRow:                         case '6': return PAGE_DOWN;: 51
UpdateRowCalled
updRow:                         case '7': return HOME_KEY;: 50
UpdateRowCalled
updRow:                         case '8': return END_KEY;: 49
UpdateRowCalled
updRow:                     }: 21
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             else{: 17
UpdateRowCalled
updRow:                 switch(seq[1]){: 31
UpdateRowCalled
updRow:                     case 'A': return ARROW_UP;: 46
UpdateRowCalled
updRow:                     case 'B': return ARROW_DOWN;: 48
UpdateRowCalled
updRow:                     case 'C': return ARROW_RIGHT;: 49
UpdateRowCalled
updRow:                     case 'D': return ARROW_LEFT;: 48
UpdateRowCalled
updRow:                     case 'H': return HOME_KEY;: 46
UpdateRowCalled
updRow:                     case 'F': return END_KEY;: 45
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }else if(seq[0] == 'O'){: 32
UpdateRowCalled
updRow:             switch(seq[1]){: 27
UpdateRowCalled
updRow:                 case 'H': return HOME_KEY;: 42
UpdateRowCalled
updRow:                 case 'F': return END_KEY;: 41
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         return '\x1b';: 22
UpdateRowCalled
updRow:     }else{: 10
UpdateRowCalled
updRow:         return c;: 17
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int getCursorPosition(int *rows, int *cols) {: 45
UpdateRowCalled
updRow:     char buf[32];: 17
UpdateRowCalled
updRow:     unsigned int i = 0;: 23
UpdateRowCalled
updRow:     if (write(STDOUT_FILENO, "\x1b[6n", 4) != 4) return -1;: 59
UpdateRowCalled
updRow:     while (i < sizeof(buf) - 1) {: 33
UpdateRowCalled
updRow:         if (read(STDIN_FILENO, &buf[i], 1) != 1) break;: 55
UpdateRowCalled
updRow:         if (buf[i] == 'R') break;: 33
UpdateRowCalled
updRow:         i++;: 12
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     buf[i] = '\0';: 18
UpdateRowCalled
updRow:     if (buf[0] != '\x1b' || buf[1] != '[') return -1;: 53
UpdateRowCalled
updRow:     if (sscanf(&buf[2], "%d;%d", rows, cols) != 2) return -1;: 61
UpdateRowCalled
updRow:     return 0;: 13
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int getWindowSize(int *rows, int *cols) {: 41
UpdateRowCalled
updRow:     struct winsize ws;: 22
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {: 72
UpdateRowCalled
updRow:         if (write(STDOUT_FILENO, "\x1b[999C\x1b[999B", 12) != 12) return -1;: 76
UpdateRowCalled
updRow:         return getCursorPosition(rows, cols);: 45
UpdateRowCalled
updRow:     } : 6
UpdateRowCalled
updRow:     else {: 10
UpdateRowCalled
updRow:         *cols = ws.ws_col;: 26
UpdateRowCalled
updRow:         *rows = ws.ws_row;: 26
UpdateRowCalled
updRow:         return 0;: 17
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int is_separator(int c) {: 25
UpdateRowCalled
updRow:     return isspace(c) || c == '\0' || strchr(",.()+-/*=~%<>[];", c) != NULL;: 76
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorUpdateSyntax(erow *row) {: 36
UpdateRowCalled
updRow:     row->hl = (unsigned char *)realloc(row->hl, row->rsize);: 60
UpdateRowCalled
updRow:     memset(row->hl, HL_NORMAL, row->rsize);: 43
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if (E.syntax == NULL) return;: 33
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     const char **keywords = E.syntax->keywords;: 47
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     const char *scs = E.syntax->singleline_comment_start;: 57
UpdateRowCalled
updRow:     const char *mcs = E.syntax->multiline_comment_start;: 56
UpdateRowCalled
updRow:     const char *mce = E.syntax->multiline_comment_end;: 54
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     int scs_len = scs ? strlen(scs) : 0;: 40
UpdateRowCalled
updRow:     int mcs_len = mcs ? strlen(mcs) : 0;: 40
UpdateRowCalled
updRow:     int mce_len = mce ? strlen(mce) : 0;: 40
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     int prev_sep = 1;: 21
UpdateRowCalled
updRow:     int in_string = 0;: 22
UpdateRowCalled
updRow:     int in_comment = (row->idx > 0 && E.row[row->idx - 1].hl_open_comment);: 75
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     int i = 0;: 14
UpdateRowCalled
updRow:     while (i < row->rsize) {: 28
UpdateRowCalled
updRow:         char c = row->render[i];: 32
UpdateRowCalled
updRow:         unsigned char prev_hl = (i > 0) ? row->hl[i - 1] : HL_NORMAL;: 69
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:          if (scs_len && !in_string && !in_comment) {: 52
UpdateRowCalled
updRow:             if (!strncmp(&row->render[i], scs, scs_len)) {: 58
UpdateRowCalled
updRow:                 memset(&row->hl[i], HL_COMMENT, row->rsize - i);: 64
UpdateRowCalled
updRow:                 break;: 22
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         if (mcs_len && mce_len && !in_string) {: 47
UpdateRowCalled
updRow:             if (in_comment) {: 29
UpdateRowCalled
updRow:                 row->hl[i] = HL_MLCOMMENT;: 42
UpdateRowCalled
updRow:                 if (!strncmp(&row->render[i], mce, mce_len)) {: 62
UpdateRowCalled
updRow:                     memset(&row->hl[i], HL_MLCOMMENT, mce_len);: 63
UpdateRowCalled
updRow:                     i += mce_len;: 33
UpdateRowCalled
updRow:                     in_comment = 0;: 35
UpdateRowCalled
updRow:                     prev_sep = 1;: 33
UpdateRowCalled
updRow:                     continue;: 29
UpdateRowCalled
updRow:                 } else {: 24
UpdateRowCalled
updRow:                     i++;: 24
UpdateRowCalled
updRow:                     continue;: 29
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:             } else if (!strncmp(&row->render[i], mcs, mcs_len)) {: 65
UpdateRowCalled
updRow:                 memset(&row->hl[i], HL_MLCOMMENT, mcs_len);: 59
UpdateRowCalled
updRow:                 i += mcs_len;: 29
UpdateRowCalled
updRow:                 in_comment = 1;: 31
UpdateRowCalled
updRow:                 continue;: 25
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         if (E.syntax->flags & HL_HIGHLIGHT_STRINGS) {: 53
UpdateRowCalled
updRow:             if (in_string) {: 28
UpdateRowCalled
updRow:                 row->hl[i] = HL_STRING;: 39
UpdateRowCalled
updRow:                 if (c == '\\' && i + 1 < row->rsize) {: 54
UpdateRowCalled
updRow:                     row->hl[i + 1] = HL_STRING;: 47
UpdateRowCalled
updRow:                     i += 2;: 27
UpdateRowCalled
updRow:                     continue;: 29
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:                 if (c == in_string) in_string = 0;: 50
UpdateRowCalled
updRow:                 i++;: 20
UpdateRowCalled
updRow:                 prev_sep = 1;: 29
UpdateRowCalled
updRow:                 continue;: 25
UpdateRowCalled
updRow:             } else {: 20
UpdateRowCalled
updRow:                 if (c == '"' || c == '\'') {: 44
UpdateRowCalled
updRow:                 in_string = c;: 30
UpdateRowCalled
updRow:                 row->hl[i] = HL_STRING;: 39
UpdateRowCalled
updRow:                 i++;: 20
UpdateRowCalled
updRow:                 continue;: 25
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         if (E.syntax->flags & HL_HIGHLIGHT_NUMBERS) {: 53
UpdateRowCalled
updRow:             if ((isdigit(c) && (prev_sep || prev_hl == HL_NUMBER))||: 68
UpdateRowCalled
updRow:                 (c == '.' && prev_hl == HL_NUMBER)) {: 53
UpdateRowCalled
updRow:                 row->hl[i] = HL_NUMBER;: 39
UpdateRowCalled
updRow:                 i++;: 20
UpdateRowCalled
updRow:                 prev_sep = 0;: 29
UpdateRowCalled
updRow:                 continue;: 25
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         if (prev_sep) {: 23
UpdateRowCalled
updRow:             int j;: 18
UpdateRowCalled
updRow:             for (j = 0; keywords[j]; j++) {: 43
UpdateRowCalled
updRow:                 int klen = strlen(keywords[j]);: 47
UpdateRowCalled
updRow:                 int kw2 = keywords[j][klen - 1] == '|';: 55
UpdateRowCalled
updRow:                 if (kw2) klen--;: 32
UpdateRowCalled
updRow:                 if (!strncmp(&row->render[i], keywords[j], klen) &&: 67
UpdateRowCalled
updRow:                     is_separator(row->render[i + klen])) {: 58
UpdateRowCalled
updRow:                     memset(&row->hl[i], kw2 ? HL_KEYWORD2 : HL_KEYWORD1, klen);: 79
UpdateRowCalled
updRow:                     i += klen;: 30
UpdateRowCalled
updRow:                     break;: 26
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             if (keywords[j] != NULL) {: 38
UpdateRowCalled
updRow:                 prev_sep = 0;: 29
UpdateRowCalled
updRow:                 continue;: 25
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         prev_sep = is_separator(c);: 35
UpdateRowCalled
updRow:         i++;: 12
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     int changed = (row->hl_open_comment != in_comment);: 55
UpdateRowCalled
updRow:     row->hl_open_comment = in_comment;: 38
UpdateRowCalled
updRow:     if (changed && row->idx + 1 < E.numrows): 44
UpdateRowCalled
updRow:         editorUpdateSyntax(&E.row[row->idx + 1]);: 49
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int editorSyntaxToColor(int hl) {: 33
UpdateRowCalled
updRow:   switch (hl) { : 16
UpdateRowCalled
updRow:     case HL_COMMENT:: 20
UpdateRowCalled
updRow:     case HL_MLCOMMENT: return 36;: 33
UpdateRowCalled
updRow:     case HL_KEYWORD1: return 33;: 32
UpdateRowCalled
updRow:     case HL_KEYWORD2: return 32;: 32
UpdateRowCalled
updRow:     case HL_STRING: return 35;: 30
UpdateRowCalled
updRow:     case HL_NUMBER: return 31;: 30
UpdateRowCalled
updRow:     case HL_MATCH: return 34;: 29
UpdateRowCalled
updRow:     default: return 37;: 23
UpdateRowCalled
updRow:   }: 3
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorSelectSyntaxHighlight() {: 36
UpdateRowCalled
updRow:     E.syntax = NULL;: 20
UpdateRowCalled
updRow:     if (E.filename == NULL) return;: 35
UpdateRowCalled
updRow:     char *ext = strrchr(E.filename, '.');: 41
UpdateRowCalled
updRow:     for (unsigned int j = 0; j < HLDB_ENTRIES; j++) {: 53
UpdateRowCalled
updRow:         editorSyntax *s = &HLDB[j];: 35
UpdateRowCalled
updRow:         unsigned int i = 0;: 27
UpdateRowCalled
updRow:         while (s->filematch[i]) {: 33
UpdateRowCalled
updRow:             int is_ext = (s->filematch[i][0] == '.');: 53
UpdateRowCalled
updRow:             if ((is_ext && ext && !strcmp(ext, s->filematch[i])) ||: 67
UpdateRowCalled
updRow:                 (!is_ext && strstr(E.filename, s->filematch[i]))) {: 67
UpdateRowCalled
updRow:                 E.syntax = s;: 29
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:                 int filerow;: 28
UpdateRowCalled
updRow:                 for (filerow = 0; filerow < E.numrows; filerow++) {: 67
UpdateRowCalled
updRow:                     editorUpdateSyntax(&E.row[filerow]);: 56
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:                 return;: 23
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             i++;: 16
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorUpdateRow(erow *row){: 32
UpdateRowCalled
updRow:     fprintf(fp1, "%s\n","UpdateRowCalled");: 43
UpdateRowCalled
updRow:     int tabs = 0;: 17
UpdateRowCalled
updRow:     for(int j = 0; j < row->size; j++){: 39
UpdateRowCalled
updRow:         if(row->chars[j] == '\t') tabs++;: 41
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     free(row->render);: 22
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     row->render = (char *)malloc(sizeof(char) * (row->size + : 61
UpdateRowCalled
updRow:                                             tabs * (KILO_TAB_STOP) + 1));: 73
UpdateRowCalled
updRow:     int j;: 10
UpdateRowCalled
updRow:     int idx = 0;: 16
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     for(j = 0; j < row->size; j++){: 35
UpdateRowCalled
updRow:         if(row->chars[j] == '\t'){: 34
UpdateRowCalled
updRow:             row->render[idx++] = ' ';: 37
UpdateRowCalled
updRow:             while(idx % KILO_TAB_STOP != 0){: 44
UpdateRowCalled
updRow:                 row->render[idx++] = ' ';: 41
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         else{: 13
UpdateRowCalled
updRow:             row->render[idx++] = row->chars[j];: 47
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     row->render[idx] = '\0';: 28
UpdateRowCalled
updRow:     row->rsize = idx;: 21
UpdateRowCalled
updRow:     fprintf(fp1, "updRow: %s: %d\n", row->chars, row->rsize);: 61
UpdateRowCalled
updRow:     editorUpdateSyntax(row);: 28
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorInsertRow(int at, const char *s, size_t len){: 56
UpdateRowCalled
updRow:     if (at < 0 || at > E.numrows) return;: 41
UpdateRowCalled
updRow:     E.row = (erow *) realloc(E.row, sizeof(erow) * (E.numrows + 1));: 68
UpdateRowCalled
updRow:     memmove(&E.row[at + 1], &E.row[at], sizeof(erow) * (E.numrows - at));: 73
UpdateRowCalled
updRow:     for (int j = at + 1; j <= E.numrows; j++) : 46
UpdateRowCalled
updRow:         E.row[j].idx++;: 23
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     E.row[at].idx = at;: 23
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     E.row[at].size = len;: 25
UpdateRowCalled
updRow:     E.row[at].chars = (char *)malloc((len + 1) * sizeof(char));: 63
UpdateRowCalled
updRow:     mempcpy(E.row[at].chars, s, len);: 37
UpdateRowCalled
updRow:     E.row[at].chars[len]  = '\0';  : 35
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     E.row[at].rsize = 0;: 24
UpdateRowCalled
updRow:     E.row[at].render = NULL;: 28
UpdateRowCalled
updRow:     E.row[at].hl = NULL;: 24
UpdateRowCalled
updRow:     E.row[at].hl_open_comment = 0;: 34
UpdateRowCalled
updRow:     editorUpdateRow(&E.row[at]);: 32
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     E.numrows++;: 16
UpdateRowCalled
updRow:     E.dirty++;: 14
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorRowInsertChar(erow *row, int at, int c){: 51
UpdateRowCalled
updRow:     if(at < 0 || at > row->size) at = row->size;: 48
UpdateRowCalled
updRow:     row->chars = (char *)realloc(row->chars, row->size + 2);: 60
UpdateRowCalled
updRow:     memmove(&row->chars[at + 1], &row->chars[at], row->size -at + 1);: 69
UpdateRowCalled
updRow:     row->size++;: 16
UpdateRowCalled
updRow:     row->chars[at] = c;: 23
UpdateRowCalled
updRow:     editorUpdateRow(row);: 25
UpdateRowCalled
updRow:     E.dirty++;: 14
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorFreeRow(erow *row) {: 31
UpdateRowCalled
updRow:     free(row->render);: 22
UpdateRowCalled
updRow:     free(row->chars);: 21
UpdateRowCalled
updRow:     free(row->hl);: 18
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: void editorDelRow(int at) {: 27
UpdateRowCalled
updRow:     if (at < 0 || at >= E.numrows) return;: 42
UpdateRowCalled
updRow:     editorFreeRow(&E.row[at]);: 30
UpdateRowCalled
updRow:     memmove(&E.row[at], &E.row[at + 1], sizeof(erow) * (E.numrows - at - 1));: 77
UpdateRowCalled
updRow:     for (int j = at; j < E.numrows - 1; j++) E.row[j].idx--;: 60
UpdateRowCalled
updRow:     E.numrows--;: 16
UpdateRowCalled
updRow:     E.dirty++;: 14
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorRowAppendString(erow *row, char *s, size_t len) {: 60
UpdateRowCalled
updRow:     row->chars = (char *) realloc(row->chars, row->size + len + 1);: 67
UpdateRowCalled
updRow:     memcpy(&row->chars[row->size], s, len);: 43
UpdateRowCalled
updRow:     row->size += len;: 21
UpdateRowCalled
updRow:     row->chars[row->size] = '\0';: 33
UpdateRowCalled
updRow:     editorUpdateRow(row);: 25
UpdateRowCalled
updRow:     E.dirty++;: 14
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorRowDelChar(erow *row, int at) {: 42
UpdateRowCalled
updRow:     if (at < 0 || at >= row->size) return;: 42
UpdateRowCalled
updRow:     memmove(&row->chars[at], &row->chars[at + 1], row->size - at);: 66
UpdateRowCalled
updRow:     row->size--;: 16
UpdateRowCalled
updRow:     editorUpdateRow(row);: 25
UpdateRowCalled
updRow:     E.dirty++;: 14
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorInsertChar(int c) {: 30
UpdateRowCalled
updRow:   if (E.cy == E.numrows) {: 26
UpdateRowCalled
updRow:     char temp[] = "";: 21
UpdateRowCalled
updRow:     editorInsertRow(E.numrows, temp, 0);: 40
UpdateRowCalled
updRow:   }: 3
UpdateRowCalled
updRow:   editorRowInsertChar(&E.row[E.cy], E.cx, c);: 45
UpdateRowCalled
updRow:   E.cx++;: 9
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorInsertNewline(){: 27
UpdateRowCalled
updRow:     if(E.cx == 0){: 18
UpdateRowCalled
updRow:         editorInsertRow(E.cy, "", 0);: 37
UpdateRowCalled
updRow:     }else{: 10
UpdateRowCalled
updRow:         erow *row = &E.row[E.cy];: 33
UpdateRowCalled
updRow:         editorInsertRow(E.cy + 1, &row->chars[E.cx], row->size - E.cx);: 71
UpdateRowCalled
updRow:         row = &E.row[E.cy];: 27
UpdateRowCalled
updRow:         row->size = E.cx;: 25
UpdateRowCalled
updRow:         row->chars[row->size] = '\0';: 37
UpdateRowCalled
updRow:         editorUpdateRow(row);: 29
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     E.cy++;: 11
UpdateRowCalled
updRow:     E.cx = 0;: 13
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorDelChar() {: 22
UpdateRowCalled
updRow:     if (E.cy == E.numrows) return;: 34
UpdateRowCalled
updRow:     if (E.cx == 0 && E.cy == 0) return;: 39
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     erow *row = &E.row[E.cy];: 29
UpdateRowCalled
updRow:     if (E.cx > 0) {: 19
UpdateRowCalled
updRow:     editorRowDelChar(row, E.cx - 1);: 36
UpdateRowCalled
updRow:     E.cx--;: 11
UpdateRowCalled
updRow:     }else{: 10
UpdateRowCalled
updRow:         E.cx = E.row[E.cy - 1].size;: 36
UpdateRowCalled
updRow:         editorRowAppendString(&E.row[E.cy - 1], row->chars, row->size);: 71
UpdateRowCalled
updRow:         editorDelRow(E.cy);: 27
UpdateRowCalled
updRow:         E.cy--;: 15
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorOpen(char *filename){: 32
UpdateRowCalled
updRow:     free(E.filename);: 21
UpdateRowCalled
updRow:     E.filename = strdup(filename);: 34
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     editorSelectSyntaxHighlight();: 34
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     FILE *fp = fopen(filename, "r");: 36
UpdateRowCalled
updRow:     if(!fp) die("fopen");: 25
UpdateRowCalled
updRow:     char *line = NULL;: 22
UpdateRowCalled
updRow:     ssize_t linelen;: 20
UpdateRowCalled
updRow:     size_t linecap = 0;: 23
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     while ((linelen = getline(&line, &linecap, fp)) != -1){: 59
UpdateRowCalled
updRow:         while(linelen > 0 && (line[linelen - 1] == '\n' || : 59
UpdateRowCalled
updRow:                             line[linelen - 1] == '\r')){: 56
UpdateRowCalled
updRow:                                 linelen --;: 43
UpdateRowCalled
updRow:                             }: 29
UpdateRowCalled
updRow:         editorInsertRow(E.numrows, line, linelen);: 50
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     free(line);: 15
UpdateRowCalled
updRow:     fclose(fp);: 15
UpdateRowCalled
updRow:     E.dirty = 0;: 16
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorSave(){: 18
UpdateRowCalled
updRow:     if (E.filename == NULL) {: 29
UpdateRowCalled
updRow:         E.filename = editorPrompt("Save as: %s (ESC to cancel)", NULL);: 71
UpdateRowCalled
updRow:         if(E.filename == NULL){: 31
UpdateRowCalled
updRow:             editorSetStatusMessage("Save aborted");: 51
UpdateRowCalled
updRow:             return;: 19
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         editorSelectSyntaxHighlight();: 38
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     int len;: 12
UpdateRowCalled
updRow:     char *buf = editorRowsToString(&len);: 41
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     int fd = open(E.filename, O_RDWR| O_CREAT, 0644);: 53
UpdateRowCalled
updRow:     if (fd != -1) {: 19
UpdateRowCalled
updRow:         if (ftruncate(fd, len) != -1) {: 39
UpdateRowCalled
updRow:             if (write(fd, buf, len) == len) {: 45
UpdateRowCalled
updRow:                 close(fd);: 26
UpdateRowCalled
updRow:                 free(buf);: 26
UpdateRowCalled
updRow:                 E.dirty = 0;: 28
UpdateRowCalled
updRow:                 editorSetStatusMessage("%d bytes written to disk", len);: 72
UpdateRowCalled
updRow:                 return;: 23
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         close(fd);: 18
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     free(buf);: 14
UpdateRowCalled
updRow:     editorSetStatusMessage("Can't save! I/O error: %s", strerror(errno));: 73
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorFindCallback(char *query, int key) {: 47
UpdateRowCalled
updRow:     static int last_match = -1;: 31
UpdateRowCalled
updRow:     static int direction = 1;: 29
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     static int saved_hl_line;: 29
UpdateRowCalled
updRow:     static char *saved_hl = NULL;: 33
UpdateRowCalled
updRow:     if (saved_hl) {: 19
UpdateRowCalled
updRow:         memcpy(E.row[saved_hl_line].hl, saved_hl, E.row[saved_hl_line].rsize);: 78
UpdateRowCalled
updRow:         free(saved_hl);: 23
UpdateRowCalled
updRow:         saved_hl = NULL;: 24
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if (key == '\r' || key == '\x1b') {: 39
UpdateRowCalled
updRow:         last_match = -1;: 24
UpdateRowCalled
updRow:         direction = 1;: 22
UpdateRowCalled
updRow:         return;: 15
UpdateRowCalled
updRow:     }else if (key == ARROW_RIGHT || key == ARROW_DOWN) {: 56
UpdateRowCalled
updRow:         direction = 1;: 22
UpdateRowCalled
updRow:     } else if (key == ARROW_LEFT || key == ARROW_UP) {: 54
UpdateRowCalled
updRow:         direction = -1;: 23
UpdateRowCalled
updRow:     } else {: 12
UpdateRowCalled
updRow:         last_match = -1;: 24
UpdateRowCalled
updRow:         direction = 1;: 22
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if (last_match == -1) direction = 1;: 40
UpdateRowCalled
updRow:     int current = last_match;: 29
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     int i;: 10
UpdateRowCalled
updRow:     for (i = 0; i < E.numrows; i++) {: 37
UpdateRowCalled
updRow:         current += direction;: 29
UpdateRowCalled
updRow:         if (current == -1) current = E.numrows - 1;: 51
UpdateRowCalled
updRow:         else if (current == E.numrows) current = 0;: 51
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         erow *row = &E.row[current];: 36
UpdateRowCalled
updRow:         char *match = strstr(row->render, query);: 49
UpdateRowCalled
updRow:         if (match) {: 20
UpdateRowCalled
updRow:             last_match = current;: 33
UpdateRowCalled
updRow:             E.cy = current;: 27
UpdateRowCalled
updRow:             E.cx = editorRowRxToCx(row, match - row->render);: 61
UpdateRowCalled
updRow:             E.rowoff = E.numrows;: 33
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:             saved_hl_line = current;: 36
UpdateRowCalled
updRow:             saved_hl = (char *) malloc(row->rsize);: 51
UpdateRowCalled
updRow:             memcpy(saved_hl, row->hl, row->rsize);: 50
UpdateRowCalled
updRow:             memset(&row->hl[match - row->render], HL_MATCH, strlen(query));: 75
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorFind(){: 18
UpdateRowCalled
updRow:     int saved_cx = E.cx;: 24
UpdateRowCalled
updRow:     int saved_cy = E.cy;: 24
UpdateRowCalled
updRow:     int saved_coloff = E.coloff;: 32
UpdateRowCalled
updRow:     int saved_rowoff = E.rowoff;: 32
UpdateRowCalled
updRow:     char *query = editorPrompt("Search: %s (Use ESC/Arrows/Enter)",: 67
UpdateRowCalled
updRow:                              editorFindCallback);: 49
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if(query) free(query);: 26
UpdateRowCalled
updRow:     else {: 10
UpdateRowCalled
updRow:         E.cx = saved_cx;: 24
UpdateRowCalled
updRow:         E.cy = saved_cy;: 24
UpdateRowCalled
updRow:         E.coloff = saved_coloff;: 32
UpdateRowCalled
updRow:         E.rowoff = saved_rowoff;: 32
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorProcessKeypress() {: 30
UpdateRowCalled
updRow:     static int quit_times = KILO_QUIT_TIMES;: 44
UpdateRowCalled
updRow:     int c = editorReadKey();: 28
UpdateRowCalled
updRow:      switch (c) {: 17
UpdateRowCalled
updRow:         case '\r':: 18
UpdateRowCalled
updRow:             editorInsertNewline();: 34
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         case CTRL_KEY('q'):: 27
UpdateRowCalled
updRow:             if (E.dirty && quit_times > 0) {: 44
UpdateRowCalled
updRow:                 editorSetStatusMessage("WARNING!!! File has unsaved changes. ": 78
UpdateRowCalled
updRow:                 "Press Ctrl-Q %d more times to quit.", quit_times);: 67
UpdateRowCalled
updRow:                 quit_times--;: 29
UpdateRowCalled
updRow:                 return;: 23
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             write(STDOUT_FILENO, "\x1b[2J", 4);: 47
UpdateRowCalled
updRow:             write(STDOUT_FILENO, "\x1b[H", 3);: 46
UpdateRowCalled
updRow:             exit(0);: 20
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         case CTRL_KEY('s'):: 27
UpdateRowCalled
updRow:             editorSave();: 25
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         case HOME_KEY:: 22
UpdateRowCalled
updRow:             E.cx = 0;: 21
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         case END_KEY:: 21
UpdateRowCalled
updRow:             if(E.cy < E.numrows){: 33
UpdateRowCalled
updRow:                 E.cx = E.row[E.cy].size;: 40
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         case CTRL_KEY('f'):: 27
UpdateRowCalled
updRow:             editorFind();: 25
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         case BACKSPACE:: 23
UpdateRowCalled
updRow:         case CTRL_KEY('h'):: 27
UpdateRowCalled
updRow:         case DEL_KEY: : 22
UpdateRowCalled
updRow:             if (c == DEL_KEY) editorMoveCursor(ARROW_RIGHT);: 60
UpdateRowCalled
updRow:                 editorDelChar();: 32
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         case PAGE_UP:: 21
UpdateRowCalled
updRow:         case PAGE_DOWN:: 23
UpdateRowCalled
updRow:             {: 13
UpdateRowCalled
updRow:                 if(c == PAGE_UP){: 33
UpdateRowCalled
updRow:                     E.cy = E.rowoff;: 36
UpdateRowCalled
updRow:                 }else if(c == PAGE_DOWN){: 41
UpdateRowCalled
updRow:                     E.cy = E.rowoff + E.screenrows - 1;: 55
UpdateRowCalled
updRow:                     if(E.cy > E.numrows) E.cy = E.numrows;: 58
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:                 int times = E.screenrows;: 41
UpdateRowCalled
updRow:                 while(times--){: 31
UpdateRowCalled
updRow:                     editorMoveCursor(c == PAGE_UP ? ARROW_UP : ARROW_DOWN);: 75
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:             }   : 16
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         case ARROW_UP:: 22
UpdateRowCalled
updRow:         case ARROW_DOWN:: 24
UpdateRowCalled
updRow:         case ARROW_LEFT:: 24
UpdateRowCalled
updRow:         case ARROW_RIGHT:: 25
UpdateRowCalled
updRow:             editorMoveCursor(c);: 32
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         case CTRL_KEY('l'):: 27
UpdateRowCalled
updRow:         case '\x1b':: 20
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         default:: 16
UpdateRowCalled
updRow:             editorInsertChar(c);: 32
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     quit_times = KILO_QUIT_TIMES;: 33
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void disableRawMode(): 21
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &E.orig_termios) == -1): 66
UpdateRowCalled
updRow:         die("tcsetattr");: 25
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void enableRawMode(): 20
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     if (tcgetattr(STDIN_FILENO, &E.orig_termios) == -1): 55
UpdateRowCalled
updRow:         die("tcgetattr");: 25
UpdateRowCalled
updRow:     atexit(disableRawMode);: 27
UpdateRowCalled
updRow:     struct termios raw = E.orig_termios;: 40
UpdateRowCalled
updRow:     raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);: 61
UpdateRowCalled
updRow:     raw.c_oflag &= ~(OPOST);: 28
UpdateRowCalled
updRow:     raw.c_cflag |= (CS8);: 25
UpdateRowCalled
updRow:     raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);: 52
UpdateRowCalled
updRow:     raw.c_cc[VMIN] = 0;: 23
UpdateRowCalled
updRow:     raw.c_cc[VTIME] = 1;: 24
UpdateRowCalled
updRow:     if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1): 55
UpdateRowCalled
updRow:         die("tcsetattr");: 25
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorScroll(){: 20
UpdateRowCalled
updRow:     E.rx = 0;: 13
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if(E.cy < E.numrows){: 25
UpdateRowCalled
updRow:         E.rx = editorRowCxToRx(&E.row[E.cy], E.cx);: 51
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if(E.cy < E.rowoff){: 24
UpdateRowCalled
updRow:         E.rowoff = E.cy;: 24
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     if(E.cy >= E.rowoff + E.screenrows){: 40
UpdateRowCalled
updRow:         E.rowoff = E.cy - E.screenrows + 1;: 43
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     if(E.rx < E.coloff){: 24
UpdateRowCalled
updRow:         E.coloff = E.rx;: 24
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     if(E.rx >= E.coloff + E.screencols){: 40
UpdateRowCalled
updRow:         E.coloff = E.rx - E.screencols + 1;: 43
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorDrawRows(abuf *ab): 29
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     int y;: 10
UpdateRowCalled
updRow:     for (y = 0; y < E.screenrows; y++){: 39
UpdateRowCalled
updRow:         int filerow = y + E.rowoff;: 35
UpdateRowCalled
updRow:         if( filerow >= E.numrows ){: 35
UpdateRowCalled
updRow:             if (E.numrows == 0 && y == E.screenrows / 3) {: 58
UpdateRowCalled
updRow:                 char welcome[80];: 33
UpdateRowCalled
updRow:                 int welcomelen = snprintf(welcome, sizeof(welcome),: 67
UpdateRowCalled
updRow:                     "Kilo editor -- version %s", KILO_VERSION);: 63
UpdateRowCalled
updRow:                 if (welcomelen > E.screencols) welcomelen = E.screencols;: 73
UpdateRowCalled
updRow:                 int padding = (E.screencols - welcomelen) / 2;: 62
UpdateRowCalled
updRow:                 if (padding) {: 30
UpdateRowCalled
updRow:                     abAppend(ab, "~", 1);: 41
UpdateRowCalled
updRow:                     padding--;: 30
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:                 while (padding--) abAppend(ab, " ", 1);: 55
UpdateRowCalled
updRow:                 abAppend(ab, welcome, welcomelen);: 50
UpdateRowCalled
updRow:             } else {: 20
UpdateRowCalled
updRow:                 abAppend(ab, "~", 1);: 37
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         }else{: 14
UpdateRowCalled
updRow:             int len = E.row[filerow].rsize - E.coloff;: 54
UpdateRowCalled
updRow:             if(len < 0) len = 0;: 32
UpdateRowCalled
updRow:             if(len > E.screencols) len = E.screencols;: 54
UpdateRowCalled
updRow:             char *c = &E.row[filerow].render[E.coloff];: 55
UpdateRowCalled
updRow:             unsigned char *hl = &E.row[filerow].hl[E.coloff];: 61
UpdateRowCalled
updRow:             int j;: 18
UpdateRowCalled
updRow:             int current_color = -1;: 35
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:             for (j = 0; j < len; j++) {: 39
UpdateRowCalled
updRow:                 if (iscntrl(c[j])) {: 36
UpdateRowCalled
updRow:                     char sym = (c[j] <= 26) ? '@' + c[j] : '?';: 63
UpdateRowCalled
updRow:                     abAppend(ab, "\x1b[7m", 4);: 47
UpdateRowCalled
updRow:                     abAppend(ab, &sym, 1);: 42
UpdateRowCalled
updRow:                     abAppend(ab, "\x1b[m", 3);: 46
UpdateRowCalled
updRow:                 } else if (hl[j] == HL_NORMAL) {: 48
UpdateRowCalled
updRow:                         if (current_color != -1) {: 50
UpdateRowCalled
updRow:                             abAppend(ab, "\x1b[39m", 5);: 56
UpdateRowCalled
updRow:                             current_color = -1;: 47
UpdateRowCalled
updRow:                         }: 25
UpdateRowCalled
updRow:                         abAppend(ab, &c[j], 1);: 47
UpdateRowCalled
updRow:                 } else {: 24
UpdateRowCalled
updRow:                          int color = editorSyntaxToColor(hl[j]);: 64
UpdateRowCalled
updRow:                         if (color != current_color) {: 53
UpdateRowCalled
updRow:                             current_color = color;: 50
UpdateRowCalled
updRow:                             char buf[16];: 41
UpdateRowCalled
updRow:                             int clen = snprintf(buf, sizeof(buf), "\x1b[%dm", color);: 85
UpdateRowCalled
updRow:                             abAppend(ab, buf, clen);: 52
UpdateRowCalled
updRow:                         }: 25
UpdateRowCalled
updRow:                         abAppend(ab, &c[j], 1);: 47
UpdateRowCalled
updRow:                 }: 17
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             abAppend(ab, "\x1b[39m", 5);: 40
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         abAppend(ab, "\x1b[K", 3);: 34
UpdateRowCalled
updRow:         abAppend(ab, "\r\n", 2);: 32
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorDrawStatusBar(abuf *ab){: 35
UpdateRowCalled
updRow:     abAppend(ab, "\x1b[7m", 4);: 31
UpdateRowCalled
updRow:     char status[80], rstatus[80];: 33
UpdateRowCalled
updRow:     int len = snprintf(status, sizeof(status), "%.20s - %d lines %s", : 70
UpdateRowCalled
updRow:                             E.filename?E.filename: "[No Name]", E.numrows, : 75
UpdateRowCalled
updRow:                             E.dirty ? "(modified)" : "");: 57
UpdateRowCalled
updRow:     int rlen = snprintf(rstatus, sizeof(rstatus), "%s | %d/%d",: 63
UpdateRowCalled
updRow:         E.syntax ? E.syntax->filetype : "no ft", E.cy + 1, E.numrows);: 70
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if(len > E.screencols){: 27
UpdateRowCalled
updRow:         len = E.screencols;: 27
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     abAppend(ab, status, len);: 30
UpdateRowCalled
updRow:     while(len < E.screencols){: 30
UpdateRowCalled
updRow:         if(E.screencols - len == rlen){: 39
UpdateRowCalled
updRow:             abAppend(ab, rstatus, rlen);: 40
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         }else{: 14
UpdateRowCalled
updRow:             abAppend(ab, " ", 1);: 33
UpdateRowCalled
updRow:             len ++;: 19
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     abAppend(ab, "\x1b[m", 3);: 30
UpdateRowCalled
updRow:     abAppend(ab, "\r\n", 2);: 28
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorDrawMessageBar(abuf *ab){: 36
UpdateRowCalled
updRow:     abAppend(ab, "\x1b[K", 3);: 30
UpdateRowCalled
updRow:     int msglen = strlen(E.statusmsg);: 37
UpdateRowCalled
updRow:     if(msglen > E.screencols){: 30
UpdateRowCalled
updRow:         msglen = E.screencols;: 30
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     if (msglen && time(NULL) - E.statusmsg_time < 5): 52
UpdateRowCalled
updRow:         abAppend(ab, E.statusmsg, msglen);: 42
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorRefreshScreen(): 26
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     editorScroll();: 19
UpdateRowCalled
updRow:     abuf ab = ABUF_INIT;: 24
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     abAppend(&ab, "\x1b[?25l", 6);: 34
UpdateRowCalled
updRow:     abAppend(&ab, "\x1b[H", 3);: 31
UpdateRowCalled
updRow:     editorDrawRows(&ab);: 24
UpdateRowCalled
updRow:     editorDrawStatusBar(&ab);: 29
UpdateRowCalled
updRow:     editorDrawMessageBar(&ab);: 30
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     char buf[32];: 17
UpdateRowCalled
updRow:     fprintf(fp1, "\ncx rx = %d %d\n", E.cx, E.rx);: 50
UpdateRowCalled
updRow:     snprintf(buf, sizeof(buf), "\x1b[%d;%dH", : 46
UpdateRowCalled
updRow:                 (E.cy - E.rowoff) + 1, : 39
UpdateRowCalled
updRow:                 (E.rx - E.coloff) + 1);: 39
UpdateRowCalled
updRow:     abAppend(&ab, buf, strlen(buf));: 36
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     abAppend(&ab, "\x1b[?25h", 6);: 34
UpdateRowCalled
updRow:     write(STDOUT_FILENO, ab.b, ab.len);: 39
UpdateRowCalled
updRow:     abFree(&ab);: 16
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: char *editorPrompt(const char *prompt, void (*callback)(char *, int)){: 70
UpdateRowCalled
updRow:     size_t bufsize = 128;: 25
UpdateRowCalled
updRow:     char *buf = (char*)malloc(bufsize * sizeof(char));: 54
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     size_t buflen = 0;: 22
UpdateRowCalled
updRow:     buf[0] = '\0';: 18
UpdateRowCalled
updRow:     while(1){: 13
UpdateRowCalled
updRow:         editorSetStatusMessage(prompt, buf);: 44
UpdateRowCalled
updRow:         editorRefreshScreen();: 30
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:         int c = editorReadKey();: 32
UpdateRowCalled
updRow:         if (c == DEL_KEY || c == CTRL_KEY('h') || c == BACKSPACE) {: 67
UpdateRowCalled
updRow:             if (buflen != 0) buf[--buflen] = '\0';: 50
UpdateRowCalled
updRow:         } else if (c == '\x1b') {: 33
UpdateRowCalled
updRow:             editorSetStatusMessage("");: 39
UpdateRowCalled
updRow:             if (callback) callback(buf, c);: 43
UpdateRowCalled
updRow:             free(buf);: 22
UpdateRowCalled
updRow:             return NULL;: 24
UpdateRowCalled
updRow:         } else if(c == '\r'){: 29
UpdateRowCalled
updRow:             if(buflen != 0){: 28
UpdateRowCalled
updRow:                 editorSetStatusMessage("");: 43
UpdateRowCalled
updRow:                 if (callback) callback(buf, c);: 47
UpdateRowCalled
updRow:                 return buf;: 27
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:         }else if (!iscntrl(c) && c < 128) {: 43
UpdateRowCalled
updRow:             if (buflen == bufsize - 1) {: 40
UpdateRowCalled
updRow:                 bufsize *= 2;: 29
UpdateRowCalled
updRow:                 buf = (char *)realloc(buf, bufsize);: 52
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             buf[buflen++] = c;: 30
UpdateRowCalled
updRow:             buf[buflen] = '\0';: 31
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:          if (callback) callback(buf, c);: 40
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void editorSetStatusMessage(const char *fmt, ...){: 50
UpdateRowCalled
updRow:     va_list  ap;: 16
UpdateRowCalled
updRow:     va_start(ap, fmt);: 22
UpdateRowCalled
updRow:     vsnprintf(E.statusmsg, sizeof(E.statusmsg), fmt, ap);: 57
UpdateRowCalled
updRow:     va_end(ap);: 15
UpdateRowCalled
updRow:     E.statusmsg_time = time(NULL);: 34
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void initEditor(): 17
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     E.cx = 0;: 13
UpdateRowCalled
updRow:     E.cy = 0;: 13
UpdateRowCalled
updRow:     E.numrows = 0;: 18
UpdateRowCalled
updRow:     E.row = NULL;: 17
UpdateRowCalled
updRow:     E.rowoff = 0;: 17
UpdateRowCalled
updRow:     E.coloff = 0;: 17
UpdateRowCalled
updRow:     E.rx = 0;: 13
UpdateRowCalled
updRow:     E.dirty = 0;: 16
UpdateRowCalled
updRow:     E.filename = NULL;: 22
UpdateRowCalled
updRow:     E.statusmsg[0] = '\0';: 26
UpdateRowCalled
updRow:     E.statusmsg_time = 0;: 25
UpdateRowCalled
updRow:     E.syntax = NULL;: 20
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     if (getWindowSize(&E.screenrows, &E.screencols) == -1): 58
UpdateRowCalled
updRow:         die("getWindowSize");: 29
UpdateRowCalled
updRow:     E.screenrows -= 2;: 22
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int main(int argc, char *argv[]): 32
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:     enableRawMode();: 20
UpdateRowCalled
updRow:     initEditor();: 17
UpdateRowCalled
updRow:     E.row = NULL;: 17
UpdateRowCalled
updRow:     E.numrows = 0;: 18
UpdateRowCalled
updRow:     E.rowoff = 0;: 17
UpdateRowCalled
updRow:     if (argc >= 2) {: 20
UpdateRowCalled
updRow:         editorOpen(argv[1]);: 28
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     editorSetStatusMessage(: 27
UpdateRowCalled
updRow:             "HELP: Ctrl-S = save | Ctrl-Q = quit | Ctrl-F = find");: 67
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     while (1): 13
UpdateRowCalled
updRow:     {: 5
UpdateRowCalled
updRow:         editorRefreshScreen();: 30
UpdateRowCalled
updRow:         editorProcessKeypress();: 32
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     return 0;: 13
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     tvfu: 8
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #!/usr/bin/python3: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: import cv2: 10
UpdateRowCalled
updRow: import numpy as np: 18
UpdateRowCalled
updRow: import matplotlib.pyplot as plt: 31
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: img = cv2.imread('lenna.png' , 0): 33
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #cv2.imshow('image' , img): 26
UpdateRowCalled
updRow: #cv2.waitKey(0): 15
UpdateRowCalled
updRow: #cv2.destroyAllWindows(): 24
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #plt.imshow(img, cmap = 'gray', interpolation='bicubic'): 56
UpdateRowCalled
updRow: #plt.plot([50,100] , [80,100], 'c' ,linewidth=5): 48
UpdateRowCalled
updRow: #plt.show(): 11
UpdateRowCalled
updRow: cv2.imwrite('graylenna.png', img): 33
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: from multiprocessing import Pool: 32
UpdateRowCalled
updRow: import time: 11
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: def sqrt(n):: 12
UpdateRowCalled
updRow: 	return n*n + (n/n+n) -n +(n*n): 38
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: start = time.time(): 19
UpdateRowCalled
updRow: if __name__ == "__main__":: 26
UpdateRowCalled
updRow: 	with Pool(processes=5) as p:: 36
UpdateRowCalled
updRow: 		result = p.map(sqrt, range(1,10000000), chunksize = 1000000): 76
UpdateRowCalled
updRow: 	: 8
UpdateRowCalled
updRow: 	: 8
UpdateRowCalled
updRow: print("\n", time.time() - start): 32
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #!/usr/bin/python: 17
UpdateRowCalled
updRow: import numpy as np: 18
UpdateRowCalled
updRow: import cv2: 10
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: lower_blue = np.array([110,50,50]): 34
UpdateRowCalled
updRow: upper_blue = np.array([130,255,255]): 36
UpdateRowCalled
updRow: cap = cv2.VideoCapture('a.mp4'): 31
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: while(cap.isOpened()):: 22
UpdateRowCalled
updRow:     ret, frame = cap.read(): 27
UpdateRowCalled
updRow:     hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV): 48
UpdateRowCalled
updRow:     gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY): 50
UpdateRowCalled
updRow:     mask = cv2.inRange(hsv, lower_blue, upper_blue): 51
UpdateRowCalled
updRow:     cv2.imshow('mask' , mask): 29
UpdateRowCalled
updRow:     cv2.imshow('frame', frame): 30
UpdateRowCalled
updRow:     if cv2.waitKey(10) & 0xFF == ord('q'):: 42
UpdateRowCalled
updRow:         break: 13
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: cap.release(): 13
UpdateRowCalled
updRow: cv2.destroyAllWindows(): 23
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #!/usr/bin/python3: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: import cv2: 10
UpdateRowCalled
updRow: import numpy as np: 18
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: cap = cv2.VideoCapture(0): 25
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: fourcc = cv2.VideoWriter_fourcc(*'XVID'): 40
UpdateRowCalled
updRow: out = cv2.VideoWriter('o.avi' , fourcc, 20, (640, 480)): 55
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: while True:: 11
UpdateRowCalled
updRow: 	ret, frame = cap.read(): 31
UpdateRowCalled
updRow: 	cv2.imshow('frame', frame): 34
UpdateRowCalled
updRow: 	gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY): 54
UpdateRowCalled
updRow: 	cv2.imshow('black' , gray): 34
UpdateRowCalled
updRow: 	out.write(gray): 23
UpdateRowCalled
updRow: 	if cv2.waitKey(1) & 0xFF == ord('q'):: 45
UpdateRowCalled
updRow: 		break: 21
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: cap.release(): 13
UpdateRowCalled
updRow: out.release(): 13
UpdateRowCalled
updRow: cv2.destroyAllWindows(): 23
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 24/08/2018: 10
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: Dibya Chakravorty Follow: 24
UpdateRowCalled
updRow: Physicist, programmer, entrepreneur and musician: 48
UpdateRowCalled
updRow: Jan 8, 2017 · 6 min read: 25
UpdateRowCalled
updRow: Assignment statements in Python are: 35
UpdateRowCalled
updRow: more interesting than you might think: 37
UpdateRowCalled
updRow: In this article, we will take a deep look at three kinds of assignment: 70
UpdateRowCalled
updRow: statements in Python and discuss what’s going on under the hood.: 66
UpdateRowCalled
updRow: >>> my_string = "Hello World": 29
UpdateRowCalled
updRow: >>> another_string = my_string: 30
UpdateRowCalled
updRow: >>> another_string = another_string + "!": 41
UpdateRowCalled
updRow: # right hand side is a: 22
UpdateRowCalled
updRow: # right hand side is a: 22
UpdateRowCalled
updRow: # right hand side is a: 22
UpdateRowCalled
updRow: What we nd may surprise you.: 28
UpdateRowCalled
updRow: What happens when the right hand side is: 40
UpdateRowCalled
updRow: a simple expression?: 20
UpdateRowCalled
updRow: The rst case is the easiest, so let us start with that.: 55
UpdateRowCalled
updRow: >>> my_string = "Hello World": 29
UpdateRowCalled
updRow: In simple terms, this creates a string: 38
UpdateRowCalled
updRow: assigns the name: 16
UpdateRowCalled
updRow: my_string: 9
UpdateRowCalled
updRow: “Hello World”: 17
UpdateRowCalled
updRow: in memory and: 13
UpdateRowCalled
updRow: to it. If you are using CPython[1], then: 40
UpdateRowCalled
updRow: we can even check the memory address explicitly by using the built in: 69
UpdateRowCalled
updRow: function: 8
UpdateRowCalled
updRow: id: 2
UpdateRowCalled
updRow: .: 1
UpdateRowCalled
updRow: >>> my_string = “Hello World”: 33
UpdateRowCalled
updRow: >>> id(my_string): 17
UpdateRowCalled
updRow: 140400709562064: 15
UpdateRowCalled
updRow: That big number: 15
UpdateRowCalled
updRow: 140400709562064: 15
UpdateRowCalled
updRow: denotes where the data lives in the: 35
UpdateRowCalled
updRow: memory. It will be very useful for us in this entire discussion.: 64
UpdateRowCalled
updRow: What happens if we create another string with the same value?: 61
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 1/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: >>> another_string = “Hello World”: 38
UpdateRowCalled
updRow: Does it reuse the previous “Hello World” stored in memory or does it: 72
UpdateRowCalled
updRow: create an independent copy? Let’s check this by querying the id: 65
UpdateRowCalled
updRow: function again.: 15
UpdateRowCalled
updRow: >>> id(another_string): 22
UpdateRowCalled
updRow: 140400709562208: 15
UpdateRowCalled
updRow: This outputs a di erent id, so this must be an independent copy. We: 67
UpdateRowCalled
updRow: conclude that:: 14
UpdateRowCalled
updRow: Assignment statements where the right hand side is a simple expression: 70
UpdateRowCalled
updRow: creates independent copies every time.: 38
UpdateRowCalled
updRow: While for everyday programming, this is the rule we should remember,: 68
UpdateRowCalled
updRow: there are actually some weird exceptions to this rule. Here’s an: 66
UpdateRowCalled
updRow: example.: 8
UpdateRowCalled
updRow: >>> my_string = “hello”: 27
UpdateRowCalled
updRow: >>> id(my_string): 17
UpdateRowCalled
updRow: 140400709562016: 15
UpdateRowCalled
updRow: >>> another_string = “hello”: 32
UpdateRowCalled
updRow: >>> id(another_string): 22
UpdateRowCalled
updRow: 140400709562016: 15
UpdateRowCalled
updRow: In this case, two consecutive assignment statements did not create: 66
UpdateRowCalled
updRow: independent copies. Why?: 24
UpdateRowCalled
updRow: It gets interesting now.: 24
UpdateRowCalled
updRow: For optimizing memory, Python treats a special set of objects di erently.: 73
UpdateRowCalled
updRow: The string: 10
UpdateRowCalled
updRow: “hello”: 11
UpdateRowCalled
updRow: belongs to this privileged set and has a di erent: 49
UpdateRowCalled
updRow: behavior. The exact set depends on the implementation like CPython,: 67
UpdateRowCalled
updRow: PyPy, Jython or IronPython. For CPython, the special rule applies to:: 69
UpdateRowCalled
updRow: • Strings without whitespaces and less than 20 characters and: 63
UpdateRowCalled
updRow: • Integers from -5 to +255.: 29
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 2/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: These objects are always reused or interned. The rationale behind doing: 71
UpdateRowCalled
updRow: this is as follows:: 19
UpdateRowCalled
updRow: 1. Since programmers use these objects frequently, interning existing: 69
UpdateRowCalled
updRow: objects saves memory.: 21
UpdateRowCalled
updRow: 2. Since immutable objects like tuples and strings cannot be: 60
UpdateRowCalled
updRow: modi ed, there is no risk in interning the same object.: 55
UpdateRowCalled
updRow: However, Python does not do this for all immutable objects because: 66
UpdateRowCalled
updRow: there is a runtime cost involved for this feature. For interning an object,: 75
UpdateRowCalled
updRow: it must rst search for the object in memory, and searching takes time.: 70
UpdateRowCalled
updRow: This is why the special treatment only applies for small integers and: 69
UpdateRowCalled
updRow: strings, because nding them is not that costly.: 47
UpdateRowCalled
updRow: What happens when the right hand side is an existing: 52
UpdateRowCalled
updRow: Python variable?: 16
UpdateRowCalled
updRow: Let’s move on to the second type of assignment statement where the: 68
UpdateRowCalled
updRow: right hand side is an existing Python variable.: 47
UpdateRowCalled
updRow: >>> another_string = my_string: 30
UpdateRowCalled
updRow: In this case, nothing is created in memory. After the assignment, both: 70
UpdateRowCalled
updRow: variables refer to the already existing object. It’s basically like giving the: 80
UpdateRowCalled
updRow: object an additional nickname or alias. Let’s con rm this by using the id: 75
UpdateRowCalled
updRow: function.: 9
UpdateRowCalled
updRow: >>> my_string = “Hello World”: 33
UpdateRowCalled
updRow: >>> id(my_string): 17
UpdateRowCalled
updRow: 140400709562160: 15
UpdateRowCalled
updRow: >>> another_string = my_string: 30
UpdateRowCalled
updRow: >>> id(another_string): 22
UpdateRowCalled
updRow: 140400709562160: 15
UpdateRowCalled
updRow: The natural question at this stage is : what if, instead of just giving the: 75
UpdateRowCalled
updRow: existing object an alias, we wanted to create an independent copy?: 66
UpdateRowCalled
updRow: For mutable objects, this is possible. You can either use the: 61
UpdateRowCalled
updRow: copy: 4
UpdateRowCalled
updRow: module of Python (which works on all objects) or you may use copy: 65
UpdateRowCalled
updRow: methods speci c to the class. For a: 35
UpdateRowCalled
updRow: list: 4
UpdateRowCalled
updRow: , you have several possibilities: 32
UpdateRowCalled
updRow: for creating copies, all of which have di erent runtime.: 56
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 3/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: my_list = [1, 2, 3]: 19
UpdateRowCalled
updRow: copy_of_my_list = my_list.copy(): 32
UpdateRowCalled
updRow: copy_of_my_list = my_list[:]: 28
UpdateRowCalled
updRow: copy_of_my_list = list(my_list): 31
UpdateRowCalled
updRow: import copy: 11
UpdateRowCalled
updRow: copy_of_my_list = copy.copy(my_list): 36
UpdateRowCalled
updRow: # fastest, works only on: 24
UpdateRowCalled
updRow: # same runtime as List.c: 24
UpdateRowCalled
updRow: # slightly slower: 17
UpdateRowCalled
updRow: # slowest: 9
UpdateRowCalled
updRow: How can you copy an immutable object? Well...you can’t! At least not in: 73
UpdateRowCalled
updRow: a straightforward way. If you try to use the copy module or the slicing: 71
UpdateRowCalled
updRow: notation, you will get back the same object and not an independent: 66
UpdateRowCalled
updRow: copy. Here’s proof.: 21
UpdateRowCalled
updRow: # Standard ways of copying lists do not apply for tuples: 56
UpdateRowCalled
updRow: >>> my_tuple = (1, 2, 3): 24
UpdateRowCalled
updRow: >>> id(my_tuple): 16
UpdateRowCalled
updRow: 140371873244816: 15
UpdateRowCalled
updRow: >>> another_tuple = my_tuple[:]: 31
UpdateRowCalled
updRow: >>> id(another_tuple): 21
UpdateRowCalled
updRow: 140371873244816: 15
UpdateRowCalled
updRow: # The copy module also doesn’t help: 37
UpdateRowCalled
updRow: >>> import copy: 15
UpdateRowCalled
updRow: More importantly, there is no reason for explicitly copying an: 62
UpdateRowCalled
updRow: immutable object anyway. We will see why in a moment when we: 60
UpdateRowCalled
updRow: discuss the third kind of assignment statement.: 47
UpdateRowCalled
updRow: What happpens when the right hand side is an: 44
UpdateRowCalled
updRow: operation?: 10
UpdateRowCalled
updRow: In this case, what happens depends on the result of the operation. We: 69
UpdateRowCalled
updRow: will discuss two simple cases:: 30
UpdateRowCalled
updRow: 1. adding an element to an immutable object (like a tuple) and: 62
UpdateRowCalled
updRow: 2. adding an element to a mutable object (like a list).: 55
UpdateRowCalled
updRow: Let’s start with the case of the tuple.: 41
UpdateRowCalled
updRow: >>> another_tuple +=: 20
UpdateRowCalled
updRow: (4,): 4
UpdateRowCalled
updRow: When you add a new element to a tuple using: 43
UpdateRowCalled
updRow: another_tuple += (4,): 21
UpdateRowCalled
updRow: ,: 1
UpdateRowCalled
updRow: this creates a new object in memory. The immutability of tuples is key: 70
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 4/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: to understanding this. Since tuples are immutable, any operation that: 69
UpdateRowCalled
updRow: leads to a changed tuple would result in an independent copy.: 61
UpdateRowCalled
updRow: This is the reason why you don’t need to explicitly copy immutable: 68
UpdateRowCalled
updRow: objects : it happens automatically under the hood. Here’s an example.: 71
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: (1,: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: (1: 2
UpdateRowCalled
updRow: my_tuple = (1, 2, 3): 20
UpdateRowCalled
updRow: another_tuple = my_tuple: 24
UpdateRowCalled
updRow: another_tuple += (4,): 21
UpdateRowCalled
updRow: print(another_tuple): 20
UpdateRowCalled
updRow: 2, 3, 4): 8
UpdateRowCalled
updRow: print(my_tuple): 15
UpdateRowCalled
updRow: 2 3): 4
UpdateRowCalled
updRow: # both variables point to the same: 34
UpdateRowCalled
updRow: # this statement creates a new ind: 34
UpdateRowCalled
updRow: # the old one remains unharmed: 30
UpdateRowCalled
updRow: The situation is much di erent for mutable objects and much more: 64
UpdateRowCalled
updRow: confusing. Let’s try the same example, but now for lists.: 59
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: [1,: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: [1: 2
UpdateRowCalled
updRow: my_list = [1, 2, 3]: 19
UpdateRowCalled
updRow: another_list = my_list: 22
UpdateRowCalled
updRow: another_list += [4,]: 20
UpdateRowCalled
updRow: print(another_list): 19
UpdateRowCalled
updRow: 2, 3, 4]: 8
UpdateRowCalled
updRow: print(my_list): 14
UpdateRowCalled
updRow: 2 3 4]: 6
UpdateRowCalled
updRow: # both variables point to the same o: 36
UpdateRowCalled
updRow: # this statement modifies the object: 36
UpdateRowCalled
updRow: # the original list is modified: 31
UpdateRowCalled
updRow: Mutable objects can be modi ed in place. Some operations modify the: 67
UpdateRowCalled
updRow: list in place and some operations don’t. In this case, the statement: 70
UpdateRowCalled
updRow: another_list += [4,]: 20
UpdateRowCalled
updRow: __iadd__: 8
UpdateRowCalled
updRow: calls: 5
UpdateRowCalled
updRow: another_list.__iadd__([4,]): 27
UpdateRowCalled
updRow: and: 3
UpdateRowCalled
updRow: modi es the existing object in place.: 37
UpdateRowCalled
updRow: To make things doubly confusing, we would have completely di erent: 66
UpdateRowCalled
updRow: results if we used a slightly di erent notation.: 48
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: [1,: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: [1: 2
UpdateRowCalled
updRow: my_list = [1, 2, 3]: 19
UpdateRowCalled
updRow: another_list = my_list: 22
UpdateRowCalled
updRow: another_list = another_list + [4,]: 34
UpdateRowCalled
updRow: print(another_list): 19
UpdateRowCalled
updRow: 2, 3, 4]: 8
UpdateRowCalled
updRow: print(my_list): 14
UpdateRowCalled
updRow: 2 3]: 4
UpdateRowCalled
updRow: # both variables point to t: 27
UpdateRowCalled
updRow: # this creates an independe: 27
UpdateRowCalled
updRow: # the original list is unha: 27
UpdateRowCalled
updRow: Woah! What’s going on? What changed?: 38
UpdateRowCalled
updRow: It turns out that when we change the third line, Python now internally: 70
UpdateRowCalled
updRow: calls a di erent function: 25
UpdateRowCalled
updRow: __iadd__: 8
UpdateRowCalled
updRow: another_list.__add__([4,]): 26
UpdateRowCalled
updRow: instead of: 10
UpdateRowCalled
updRow: . This function returns a new copy instead of modifying the: 59
UpdateRowCalled
updRow: list in place.: 14
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 5/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: To prevent this confusion, it is always better to create a true copy of the: 75
UpdateRowCalled
updRow: list if you wish to prevent modi cation to the original.: 56
UpdateRowCalled
updRow: Let’s remember the list copy methods from before. They were: 61
UpdateRowCalled
updRow: List.copy(): 11
UpdateRowCalled
updRow: ,: 1
UpdateRowCalled
updRow: [:]: 3
UpdateRowCalled
updRow: ,: 1
UpdateRowCalled
updRow: list(): 6
UpdateRowCalled
updRow: and: 3
UpdateRowCalled
updRow: copy.copy(): 11
UpdateRowCalled
updRow: . This is what we: 17
UpdateRowCalled
updRow: should use.: 11
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: [1,: 3
UpdateRowCalled
updRow: >>>: 3
UpdateRowCalled
updRow: [1: 2
UpdateRowCalled
updRow: my_list = [1, 2, 3]: 19
UpdateRowCalled
updRow: another_list = my_list.copy(): 29
UpdateRowCalled
updRow: another_list += [4,]: 20
UpdateRowCalled
updRow: print(another_list): 19
UpdateRowCalled
updRow: 2, 3, 4]: 8
UpdateRowCalled
updRow: print(my_list): 14
UpdateRowCalled
updRow: 2 3]: 4
UpdateRowCalled
updRow: # this creates an independent c: 31
UpdateRowCalled
updRow: # this statement modifies the i: 31
UpdateRowCalled
updRow: # the original list is unharmed: 31
UpdateRowCalled
updRow: There’s one last gotcha that can happen when copying lists.: 61
UpdateRowCalled
updRow: Suppose we have a list that has a nested list inside it. We copy this list: 74
UpdateRowCalled
updRow: using: 5
UpdateRowCalled
updRow: List.copy(): 11
UpdateRowCalled
updRow: and then modify the nested list. Unfortunately, this: 52
UpdateRowCalled
updRow: will modify the original list again!: 36
UpdateRowCalled
updRow: >>> my_list = [[1, 2, 3], 4, 5]: 31
UpdateRowCalled
updRow: >>> another_list = my_list.copy(): 33
UpdateRowCalled
updRow: >>> another_list[0] += [6,]: 27
UpdateRowCalled
updRow: >>> print(another_list): 23
UpdateRowCalled
updRow: [[1, 2, 3, 6], 4, 5]: 20
UpdateRowCalled
updRow: >>> print(my_list): 18
UpdateRowCalled
updRow: [[1 2 3 6] 4 5]: 15
UpdateRowCalled
updRow: Why did that happen? Didn’t we just copy the original list?: 61
UpdateRowCalled
updRow: The truth is : we actually don’t have a completely independent copy in: 72
UpdateRowCalled
updRow: this case. The: 14
UpdateRowCalled
updRow: copy(): 6
UpdateRowCalled
updRow: function generates a shallow copy. To see what it: 49
UpdateRowCalled
updRow: does, let’s look at the ids of all the elements in: 52
UpdateRowCalled
updRow: my_list: 7
UpdateRowCalled
updRow: and the ids of: 14
UpdateRowCalled
updRow: all the elements in the copied list.: 36
UpdateRowCalled
updRow: # for my_list: 13
UpdateRowCalled
updRow: >>> my_list = [[1, 2, 3], 4, 5]: 31
UpdateRowCalled
updRow: >>> id(my_list): 15
UpdateRowCalled
updRow: 140371873277424: 15
UpdateRowCalled
updRow: >>> print([id(x) for x in my_list]): 35
UpdateRowCalled
updRow: [140371873599288, 13820176, 13820152]: 37
UpdateRowCalled
updRow: # for another_list obtained by my_list.copy(): 45
UpdateRowCalled
updRow: >>> id(another_list): 20
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 6/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: We see the ids of: 17
UpdateRowCalled
updRow: indicating: 10
UpdateRowCalled
updRow: another_list: 12
UpdateRowCalled
updRow: contained in: 12
UpdateRowCalled
updRow: my_list: 7
UpdateRowCalled
updRow: and: 3
UpdateRowCalled
updRow: my_list: 7
UpdateRowCalled
updRow: another_list: 12
UpdateRowCalled
updRow: are indeed di erent,: 20
UpdateRowCalled
updRow: is a copy. But the ids of the elements: 38
UpdateRowCalled
updRow: another_list: 12
UpdateRowCalled
updRow: have the same ids as the elements in: 36
UpdateRowCalled
updRow: . So the elements have not been copied!: 39
UpdateRowCalled
updRow: This is the property of shallow copy. It creates a new copy of the object: 73
UpdateRowCalled
updRow: but reuses the attributes and elements of the old copy. Thus, when you: 70
UpdateRowCalled
updRow: modify the elements of the new copy, you are modifying the elements: 67
UpdateRowCalled
updRow: of the old copy too.: 20
UpdateRowCalled
updRow: To solve this problem, we need to copy an object along with all its: 67
UpdateRowCalled
updRow: attributes and elements. This can be achieved by: 48
UpdateRowCalled
updRow: copy.deepcopy: 13
UpdateRowCalled
updRow: .: 1
UpdateRowCalled
updRow: >>> my_list = [[1, 2, 3], 4, 5]: 31
UpdateRowCalled
updRow: >>> another_list = copy.deepcopy(my_list): 41
UpdateRowCalled
updRow: >>> another_list[0] += [6,]: 27
UpdateRowCalled
updRow: >>> another_list: 16
UpdateRowCalled
updRow: [[1, 2, 3, 6], 4, 5]: 20
UpdateRowCalled
updRow: >>> my_list: 11
UpdateRowCalled
updRow: [[1 2 3] 4 5]: 13
UpdateRowCalled
updRow: Deep copy is a quite time intensive operation and can take 1o times: 67
UpdateRowCalled
updRow: longer to complete compared to a shallow copy. But in some situations,: 70
UpdateRowCalled
updRow: it is unavoidable.: 18
UpdateRowCalled
updRow: Conclusion: 10
UpdateRowCalled
updRow: This brings me to the end of this discussion. To summarize, we have: 67
UpdateRowCalled
updRow: talked about the di erent scenarios which can arise in an assignment: 68
UpdateRowCalled
updRow: statement in Python. We found that:: 35
UpdateRowCalled
updRow: •: 3
UpdateRowCalled
updRow: When the right hand side is a simple expression, a new copy is: 62
UpdateRowCalled
updRow: created every time. There are some exceptions to this rule, which: 65
UpdateRowCalled
updRow: depend on the implementation.: 29
UpdateRowCalled
updRow: •: 3
UpdateRowCalled
updRow: When the right hand side is an existing Python variable, then an: 64
UpdateRowCalled
updRow: alias is created for the existing copy.: 39
UpdateRowCalled
updRow: •: 3
UpdateRowCalled
updRow: When the right hand side is an operation, then the outcome: 58
UpdateRowCalled
updRow: depends on the operation. In a simple case involving a tuple, we: 64
UpdateRowCalled
updRow: saw that an independent copy was created. In the same case with: 63
UpdateRowCalled
updRow: lists, we saw that the list was modi ed in place in one case (when: 66
UpdateRowCalled
updRow: we used: 7
UpdateRowCalled
updRow: __iadd__: 8
UpdateRowCalled
updRow: ) and a new copy was generated in another: 41
UpdateRowCalled
updRow: case (when we used: 18
UpdateRowCalled
updRow: •: 3
UpdateRowCalled
updRow: __add__: 7
UpdateRowCalled
updRow: ).: 2
UpdateRowCalled
updRow: Mutable objects can be copied but immutable objects cannot be: 61
UpdateRowCalled
updRow: copied in a straightforward way. There is also no need to copy: 62
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 7/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: immutable objects.: 18
UpdateRowCalled
updRow: •: 3
UpdateRowCalled
updRow: To copy a mutable object along with all its attributes and elements,: 68
UpdateRowCalled
updRow: we need to use deep copy.: 25
UpdateRowCalled
updRow: That’s it for today. Thanks for reading so far. As always, I love reading: 75
UpdateRowCalled
updRow: your comments and discussing further. So don’t hesitate to respond in: 71
UpdateRowCalled
updRow: the comment section.: 20
UpdateRowCalled
updRow: If you liked this post, please hit the ❤ button to recommend it. This will: 76
UpdateRowCalled
updRow: help other medium readers nd this post.: 39
UpdateRowCalled
updRow: . . .: 5
UpdateRowCalled
updRow: [1] CPython is just one implementation of Python. There are other: 65
UpdateRowCalled
updRow: implementations like PyPy, Jython and IronPython. These variations: 66
UpdateRowCalled
updRow: might implement the built in function: 37
UpdateRowCalled
updRow: what the implementation is,: 27
UpdateRowCalled
updRow: id: 2
UpdateRowCalled
updRow: id: 2
UpdateRowCalled
updRow: di erently. But no matter: 25
UpdateRowCalled
updRow: will return an unique id for an object: 38
UpdateRowCalled
updRow: during its lifetime. This property is all we need for the discussions in: 72
UpdateRowCalled
updRow: this article.: 13
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 8/924/08/2018: 13
UpdateRowCalled
updRow: Assignment statements in Python are more interesting than you might think: 73
UpdateRowCalled
updRow: https://medium.com/broken-window/many-names-one-memory-address-122f78734cb6: 75
UpdateRowCalled
updRow: 9/9: 3
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: ### OPTIMIZATION: 16
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: ##### Optimization: 18
UpdateRowCalled
updRow: -   Derivative/Gradient Based : 30
UpdateRowCalled
updRow: -   Derivative Free: 19
UpdateRowCalled
updRow:     - Statistical Methods: 25
UpdateRowCalled
updRow:     - Sampling Based: 20
UpdateRowCalled
updRow:     - Monter Carlo: 18
UpdateRowCalled
updRow:         - Genetic Algorithm: 27
UpdateRowCalled
updRow:         - MCMC: 14
UpdateRowCalled
updRow:             - Evolutionary Computation: 38
UpdateRowCalled
updRow:             - Ant-Conoly: 24
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: # Genetic algorithm: 19
UpdateRowCalled
updRow: > 1. Inheritance.: 17
UpdateRowCalled
updRow: > 2. Variation.: 15
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: #include<bits/stdc++.h>: 23
UpdateRowCalled
updRow: #include<unistd.h>: 18
UpdateRowCalled
updRow: #include<fcntl.h>: 17
UpdateRowCalled
updRow: #include<pthread.h>: 19
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: using namespace std; : 21
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: typedef struct{: 15
UpdateRowCalled
updRow:     bool update;: 16
UpdateRowCalled
updRow:     int hareDist;: 17
UpdateRowCalled
updRow:     int turtoiseDist;: 21
UpdateRowCalled
updRow: } updateData;: 13
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: updateData newVal;: 18
UpdateRowCalled
updRow: long const trackLength = 1e9;: 29
UpdateRowCalled
updRow: long hareTime = 0, turtoiseTime = 0;: 36
UpdateRowCalled
updRow: long hareDist = 0, turtoiseDist = 0;: 36
UpdateRowCalled
updRow: long const hareStep = 3, turtoiseStep = 1;: 42
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: long const minIntervalRequired = 100000;: 40
UpdateRowCalled
updRow: long const minHareSleeps = 1000;: 32
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: pthread_mutex_t hareDistMtx = PTHREAD_MUTEX_INITIALIZER;: 56
UpdateRowCalled
updRow: pthread_mutex_t turtoiseDistMtx = PTHREAD_MUTEX_INITIALIZER;: 60
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: //Input to god : 15
UpdateRowCalled
updRow: void getNewVal(){: 17
UpdateRowCalled
updRow:     newVal = {false, -1, -1};: 29
UpdateRowCalled
updRow:     if(rand() % 10 >=8){    //update with probability 0.2: 57
UpdateRowCalled
updRow:         newVal.update = true;: 29
UpdateRowCalled
updRow:         newVal.hareDist = rand() % (trackLength);: 49
UpdateRowCalled
updRow:         newVal.turtoiseDist = rand() % (trackLength);: 53
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void *hareFunction( void *argc ){: 33
UpdateRowCalled
updRow:     long sleepTime = 0;: 23
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     while( true ){: 18
UpdateRowCalled
updRow:         if(sleepTime == 0){: 27
UpdateRowCalled
updRow:             pthread_mutex_lock(&hareDistMtx);: 45
UpdateRowCalled
updRow:             pthread_mutex_lock(&turtoiseDistMtx);: 49
UpdateRowCalled
updRow:             if (hareDist >= trackLength){: 41
UpdateRowCalled
updRow:                 pthread_mutex_unlock(&turtoiseDistMtx);: 55
UpdateRowCalled
updRow:                 pthread_mutex_unlock(&hareDistMtx);: 51
UpdateRowCalled
updRow:                 break;: 22
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             if( hareDist > turtoiseDist + ( rand() % 10 + minIntervalRequired)){: 80
UpdateRowCalled
updRow:                 sleepTime = rand() % minHareSleeps;: 51
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             else{: 17
UpdateRowCalled
updRow:                 hareDist+=hareStep;: 35
UpdateRowCalled
updRow:             }: 13
UpdateRowCalled
updRow:             pthread_mutex_unlock(&turtoiseDistMtx);: 51
UpdateRowCalled
updRow:             pthread_mutex_unlock(&hareDistMtx);: 47
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         else {: 14
UpdateRowCalled
updRow:             sleepTime--;: 24
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         hareTime++;: 19
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     pthread_exit( (void  *) 0 );: 32
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void *turtoiseFunction( void *argc ){: 37
UpdateRowCalled
updRow:     while( true ){: 18
UpdateRowCalled
updRow:         pthread_mutex_lock(&turtoiseDistMtx);: 45
UpdateRowCalled
updRow:         if(turtoiseDist >= trackLength){: 40
UpdateRowCalled
updRow:             pthread_mutex_unlock(&turtoiseDistMtx);: 51
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         turtoiseDist+=turtoiseStep;: 35
UpdateRowCalled
updRow:         pthread_mutex_unlock(&turtoiseDistMtx);: 47
UpdateRowCalled
updRow:         turtoiseTime++;: 23
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     pthread_exit( (void*) 0 );: 30
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void *reporterFunction( void *argc ){: 37
UpdateRowCalled
updRow:     while( true ){: 18
UpdateRowCalled
updRow:         if( turtoiseDist >= trackLength && hareDist >= trackLength ){: 69
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         cout<<"\n---------------\n";: 36
UpdateRowCalled
updRow:         cout<<"Hare Position: "<<hareDist<<endl<<"Turtoise Position: "<<turtoiseDist<<endl;: 91
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     pthread_exit( (void*) 0 );: 30
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: void *godFunction( void *argc ){: 32
UpdateRowCalled
updRow:     while(true){: 16
UpdateRowCalled
updRow:         getNewVal();: 20
UpdateRowCalled
updRow:         pthread_mutex_lock(&hareDistMtx);: 41
UpdateRowCalled
updRow:         pthread_mutex_lock(&turtoiseDistMtx);: 45
UpdateRowCalled
updRow:         if( turtoiseDist >= trackLength && hareDist >= trackLength ){: 69
UpdateRowCalled
updRow:             pthread_mutex_unlock(&turtoiseDistMtx);: 51
UpdateRowCalled
updRow:             pthread_mutex_unlock(&hareDistMtx);: 47
UpdateRowCalled
updRow:             break;: 18
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         if(newVal.update){: 26
UpdateRowCalled
updRow:             if(hareDist < trackLength) hareDist = newVal.hareDist;: 66
UpdateRowCalled
updRow:             if(turtoiseDist < trackLength) turtoiseDist = newVal.turtoiseDist;: 78
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         pthread_mutex_unlock(&turtoiseDistMtx);: 47
UpdateRowCalled
updRow:         pthread_mutex_unlock(&hareDistMtx);: 43
UpdateRowCalled
updRow:         usleep(500);: 20
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int createThread(pthread_t &tidp, void *(*fun_ptr)(void *)){: 60
UpdateRowCalled
updRow:     if( pthread_create(&tidp, NULL, fun_ptr, NULL) != 0 ){: 58
UpdateRowCalled
updRow:         cout<<"Error in Creating Thread\n";: 43
UpdateRowCalled
updRow:         exit(EXIT_FAILURE);: 27
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     return 0;: 13
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: int main(){: 11
UpdateRowCalled
updRow:     pthread_t tidp[4];: 22
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     srand (time(0));: 20
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     /*Reference for information purpose only*/: 46
UpdateRowCalled
updRow:     pthread_t &hareThread = tidp[0], &turtoiseThread = tidp[1], : 64
UpdateRowCalled
updRow:                 &reporterThread = tidp[2], &godThread = tidp[3];: 64
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     /*Initialize Thread*/: 25
UpdateRowCalled
updRow:     createThread(tidp[0], hareFunction);: 40
UpdateRowCalled
updRow:     createThread(tidp[1], turtoiseFunction);: 44
UpdateRowCalled
updRow:     createThread(tidp[2], reporterFunction);: 44
UpdateRowCalled
updRow:     createThread(tidp[3], godFunction);: 39
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     /*Join main thread with all other threads*/: 47
UpdateRowCalled
updRow:     for(int i = 0; i < 4; i ++){: 32
UpdateRowCalled
updRow:         if( pthread_join( tidp[i], NULL ) != 0 ){: 49
UpdateRowCalled
updRow:             cout<<"Error in joining thread\n";: 46
UpdateRowCalled
updRow:             exit(EXIT_FAILURE);: 31
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     /*Print Result of marathon */: 33
UpdateRowCalled
updRow:     cout<<"HareTime: "<<hareTime<<" TurtoiseTime: "<<turtoiseTime<<endl;: 72
UpdateRowCalled
updRow:     cout<<"Result: ";: 21
UpdateRowCalled
updRow:     if(hareTime == turtoiseTime ){: 34
UpdateRowCalled
updRow:         cout<<"Draw\n";: 23
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     else if(hareTime > turtoiseTime){: 37
UpdateRowCalled
updRow:         cout<<"Turtoise Wins\n";: 32
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow:     else{: 9
UpdateRowCalled
updRow:         cout<<"Hare Wins\n";: 28
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: > 3. Selection.: 15
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: **Key Components of GA**:: 25
UpdateRowCalled
updRow: 1. Optimization Function: 24
UpdateRowCalled
updRow: 2. Fitness Function: Measure fitness.: 37
UpdateRowCalled
updRow: 3. Selection Function: Select from a pool.: 42
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: **Variation**: 13
UpdateRowCalled
updRow: 1. Cross Over: 13
UpdateRowCalled
updRow: 2. Mutation: 11
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: **Selection**: 13
UpdateRowCalled
updRow: 1. Basis for Selection? : 24
UpdateRowCalled
updRow:     1. Elitism: Elitism means we will give more importance to the fittest function.: 83
UpdateRowCalled
updRow:     2. Diversity: 16
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 2. Selection Methods:: 21
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     **Ranking**: In this selection method each individual is assigned a rank. One of the method to do Rank Selection is : The fittest individual is assigned rank n and the worst individual is assigned rank 1. Then Probability of individual i to get selected is defined as: 271
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     $$P(i) = \frac{2*Rank(i)}{n*(n-1)}$$: 40
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     : 4
UpdateRowCalled
updRow:     **Tournament**:: 19
UpdateRowCalled
updRow:     Randomly Select m number of individual from the pool and then order them according to their fitness and fittest individuals are selected for reproduction. : 159
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:     **Proportionate**:: 22
UpdateRowCalled
updRow:     The probability of an individual to get selected is proportional to its fitness values. Probabilitiy of individual i to get selected is defined as : 151
UpdateRowCalled
updRow:     : 4
UpdateRowCalled
updRow:     $$P(i) = \frac{fitness(i)}{\sum_{i = 1}^{n}fitness(i)}$$: 60
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: When implementing a neural network from scratch, backpropagation is arguably where it is more prone to mistakes. Therefore, a method to debug this step could potentially save a lot of time and headaches when debugging a neural network.: 235
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Here, the method of gradient checking will be introduced. Briefly, this methods consists in approximating the gradient using a numerical approach. If it is close to the calculated gradients, then backpropagation was implemented correctly!: 238
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Let’s dive into more details and let’s see how it can be implemented in a project.: 86
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Thomas Jeffrey Hanks (born July 9, 1956) is an American actor and filmmaker. Hanks is known for his comedic and dramatic roles in such films as Splash (1984), Big (1988), Turner & Hooch (1989), A League of Their Own (1992), Sleepless in Seattle (1993), Apollo 13 (1995), You've Got Mail (1998), The Green Mile (1999), Cast Away (2000), Road to Perdition (2002), Cloud Atlas (2012), Captain Phillips (2013), Saving Mr. Banks (2013), and Sully (2016). He has also starred in the Robert Langdon film series, and voices Sheriff Woody in the Toy Story film series.: 559
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks has collaborated with film director Steven Spielberg on five films to date: Saving Private Ryan (1998), Catch Me If You Can (2002), The Terminal (2004), Bridge of Spies (2015), and The Post (2017), as well as the 2001 miniseries Band of Brothers, which launched Hanks as a successful director, producer, and screenwriter. In 2010, Spielberg and Hanks were executive producers on the HBO miniseries The Pacific.: 416
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks' films have grossed more than $4.6 billion at U.S. and Canadian box offices and more than $9.2 billion worldwide,[2] making him the fourth highest-grossing actor in North America.[3] Hanks has been nominated for numerous awards during his career. He won a Golden Globe Award and an Academy Award for Best Actor for his role in Philadelphia (1993), as well as a Golden Globe, an Academy Award, a Screen Actors Guild Award, and a People's Choice Award for Best Actor for Forrest Gump (1994). In 1995, Hanks became one of only two actors who won the Academy Award for Best Actor in consecutive years, with Spencer Tracy being the other.[4] In 2004, he received the Stanley Kubrick Britannia Award for Excellence in Film from the British Academy of Film and Television Arts (BAFTA).[5] In 2014, he received a Kennedy Center Honor, and in 2016, he received a Presidential Medal of Freedom from President Barack Obama,[6] as well as the French Legion of Honor.[7]: 963
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Thomas Jeffrey Hanks[8] was born in Concord, California on July 9, 1956,[9][10] to hospital worker Janet Marylyn (née Frager)[11] and itinerant cook Amos Mefford Hanks.[10][12][13] His mother was of Portuguese descent (her family's surname was originally "Fraga"),[14] while his father had English ancestry.[15][16] His parents divorced in 1960. Their three oldest children, Sandra (later Sandra Hanks Benoiton, a writer),[17] Larry (an entomology professor at the University of Illinois at Urbana–Champaign),[18] and Tom, went with their father, while the youngest, Jim (who also became an actor and filmmaker), remained with their mother in Red Bluff, California.[19] In his childhood, Hanks' family moved often; by the age of 10, he had lived in 10 different houses.[20]: 776
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: While Hanks' family religious history was Catholic and Mormon, he has characterized his teenage self as being a "Bible-toting evangelical" for several years.[21] In school, he was unpopular with students and teachers alike, later telling Rolling Stone magazine, "I was a geek, a spaz. I was horribly, painfully, terribly shy. At the same time, I was the guy who'd yell out funny captions during filmstrips. But I didn't get into trouble. I was always a real good kid and pretty responsible."[22] In 1965, his father married Frances Wong, a San Francisco native of Chinese descent. Frances had three children, two of whom lived with Hanks during his high school years. Hanks acted in school plays, including South Pacific, while attending Skyline High School in Oakland, California.[23]: 785
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks studied theater at Chabot College in Hayward, California, and transferred to California State University, Sacramento, two years later.[24] During a 2001 interview with Bob Costas, Hanks was asked whether he would rather have an Oscar or a Heisman Trophy. He replied he would rather win a Heisman by playing halfback for the California Golden Bears.[25] He told New York magazine in 1986, "Acting classes looked like the best place for a guy who liked to make a lot of noise and be rather flamboyant. I spent a lot of time going to plays. I wouldn't take dates with me. I'd just drive to a theater, buy myself a ticket, sit in the seat and read the program, and then get into the play completely. I spent a lot of time like that, seeing Brecht, Tennessee Williams, Ibsen, and all that."[26]: 795
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: During his years studying theater, Hanks met Vincent Dowling, head of the Great Lakes Theater Festival in Cleveland, Ohio.[12] At Dowling's suggestion, Hanks became an intern at the festival. His internship stretched into a three-year experience that covered most aspects of theater production, including lighting, set design, and stage management, prompting Hanks to drop out of college. During the same time, Hanks won the Cleveland Critics Circle Award for Best Actor for his 1978 performance as Proteus in Shakespeare's The Two Gentlemen of Verona, one of the few times he played a villain.[27] Time magazine named Hanks one of the "Top 10 College Dropouts."[28]: 666
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 1987–2003: Established Star: 29
UpdateRowCalled
updRow: After a few more flops and a moderate success with the comedy Dragnet, Hanks' stature in the film industry rose. The broad success of the fantasy comedy Big (1988) established Hanks as a major Hollywood talent, both as a box office draw and within the industry as an actor.[8][12][37] For his performance in the film, Hanks earned his first nomination for the Academy Award for Best Actor.[38] Big was followed later that year by Punchline, in which he and Sally Field co-starred as struggling comedians.: 504
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks then suffered a run of box-office underperformers: The 'Burbs (1989), Joe Versus the Volcano (1990), and The Bonfire of the Vanities (1990).[12] In the last, he portrayed a greedy Wall Street figure who gets enmeshed in a hit-and-run accident. 1989's Turner & Hooch was Hanks' only financially successful film of the period.: 330
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks climbed back to the top again with his portrayal of a washed-up baseball legend turned manager in A League of Their Own (1992).[12] Hanks has stated that his acting in earlier roles was not great, but that he subsequently improved. In an interview with Vanity Fair, Hanks noted his "modern era of moviemaking ... because enough self-discovery has gone on ... My work has become less pretentiously fake and over the top". This "modern era" began in 1993 for Hanks, first with Sleepless in Seattle and then with Philadelphia. The former was a blockbuster success about a widower who finds true love over the radio airwaves.[39] Richard Schickel of TIME called his performance "charming," and most critics agreed that Hanks' portrayal ensured him a place among the premier romantic-comedy stars of his generation.[40]: 820
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In Philadelphia, he played a gay lawyer with AIDS who sues his firm for discrimination.[12] Hanks lost 35 pounds and thinned his hair in order to appear sickly for the role. In a review for People, Leah Rozen stated, "Above all, credit for Philadelphia's success belongs to Hanks, who makes sure that he plays a character, not a saint. He is flat-out terrific, giving a deeply felt, carefully nuanced performance that deserves an Oscar." Hanks won the 1993 Academy Award for Best Actor for his role in Philadelphia.[12][41] During his acceptance speech, he revealed that his high school drama teacher Rawley Farnsworth and former classmate John Gilkerson, two people with whom he was close, were gay.[42]: 704
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks followed Philadelphia with the 1994 hit Forrest Gump which grossed a worldwide total of over $600 million at the box office.[43] Hanks remarked: "When I read the script for Gump, I saw it as one of those kind of grand, hopeful movies that the audience can go to and feel ... some hope for their lot and their position in life ... I got that from the movies a hundred million times when I was a kid. I still do." Hanks won his second Best Actor Academy Award for his role in Forrest Gump, becoming only the second actor to have accomplished the feat of winning consecutive Best Actor Oscars.[44] (Spencer Tracy was the first, winning in 1937–38. Hanks and Tracy were the same age at the time they received their Academy Awards: 37 for the first and 38 for the second.)[45][46]: 783
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks' next role—astronaut and commander Jim Lovell, in the 1995 film Apollo 13—reunited him with Ron Howard.[12] Critics generally applauded the film and the performances of the entire cast, which included actors Kevin Bacon, Bill Paxton, Gary Sinise, Ed Harris, and Kathleen Quinlan. The movie also earned nine Academy Award nominations, winning two. Later that year, Hanks starred in Disney/Pixar's CGI-animated hit film Toy Story, as the voice of Sheriff Woody.[47]: 473
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks' cement prints in front of the : 37
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 2004–present: Later work: 26
UpdateRowCalled
updRow: In 2004, he appeared in three films: The Coen brothers' The Ladykillers, another Spielberg film, The Terminal, and The Polar Express, a family film from Zemeckis for which Hanks played multiple motion capture roles. In a USA Weekend interview, Hanks discussed how he chooses projects: "[Since] A League of Their Own, it can't be just another movie for me. It has to get me going somehow ... There has to be some all-encompassing desire or feeling about wanting to do that particular movie. I'd like to assume that I'm willing to go down any avenue in order to do it right". In August 2005, Hanks was voted in as vice president of the Academy of Motion Picture Arts and Sciences.[69]: 682
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks next starred in the highly anticipated film The Da Vinci Code, based on the best-selling novel by Dan Brown. The film was released May 19, 2006, in the U.S. and grossed over US$750 million worldwide.[70] He followed the film with Ken Burns's 2007 documentary The War. For the documentary, Hanks did voice work, reading excerpts from World War II-era columns by Al McIntosh. In 2006, Hanks topped a 1,500-strong list of "most trusted celebrities" compiled by Forbes magazine.[71] Hanks also produced the animated children's movie The Ant Bully in 2006.: 557
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks next appeared in a cameo role as himself in The Simpsons Movie, in which he appeared in an advertisement claiming that the U.S. government has lost its credibility and is hence buying some of his. He also made an appearance in the credits, expressing a desire to be left alone when he is out in public. Later in 2006, Hanks produced the British film Starter for Ten, a comedy based on working-class students attempting to win on University Challenge.[72]: 460
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 2007, Hanks starred in Mike Nichols's film Charlie Wilson's War (written by screenwriter Aaron Sorkin) in which he played Democratic Texas Congressman Charles Wilson. The film opened on December 21, 2007, and Hanks received a Golden Globe nomination.[73] In the comedy-drama film The Great Buck Howard (2008), Hanks played the on-screen father of a young man (played by Hanks' real-life son, Colin) who chooses to work as road manager for a fading mentalist (John Malkovich). His character was less than thrilled about his son's career decision.[74] In the same year, he executive produced the musical comedy, Mamma Mia and the miniseries, John Adams.[75][76]: 662
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks' next endeavor, released on May 15, 2009, was a film adaptation of Angels & Demons, based on the novel of the same name by Dan Brown. Its April 11, 2007, announcement revealed that Hanks would reprise his role as Robert Langdon, and that he would reportedly receive the highest salary ever for an actor.[77][78] The following day he made his 10th appearance on NBC's Saturday Night Live, impersonating himself for the Celebrity Jeopardy sketch. Hanks produced the Spike Jonze film Where The Wild Things Are, based on the children's book by Maurice Sendak in 2009.[79]: 573
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 2010, Hanks reprised his voice role of Woody in Toy Story 3, after he, Tim Allen, and John Ratzenberger were invited to a movie theater to see a complete story reel of the movie.[80] The film went on to become the first animated film to gross a worldwide total of over $1 billion as well as the highest-grossing animated film at the time.[81][82][83] He also was executive producer of the miniseries, The Pacific.[84]: 420
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 2011, he directed and starred opposite Julia Roberts in the title role in the romantic comedy Larry Crowne.[85] The movie received poor reviews, with only 35% of the 175 Rotten Tomatoes reviews giving it high ratings.[86] Also in 2011, he starred in the drama film Extremely Loud and Incredibly Close.[87] In 2012, he voiced the character Cleveland Carr for a web series he created titled Electric City.[88] He also starred in the Wachowskis-directed film adaptation of the novel of the same name, Cloud Atlas and was executive producer of the miniseries Game Change.[89]: 574
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 2013, Hanks starred in two critically acclaimed films—Captain Phillips and Saving Mr. Banks—which each earned him praise, including nominations for the BAFTA Award for Best Actor in a Leading Role and the Golden Globe Award for Best Actor – Motion Picture Drama for the former role.[90][91] In Captain Phillips, he starred as Captain Richard Phillips with Barkhad Abdi, which was based on the Maersk Alabama hijacking.[92] In Saving Mr. Banks, co-starring Emma Thompson and directed by John Lee Hancock, he played Walt Disney, being the first actor to portray Disney in a mainstream film.[93] That same year, Hanks made his Broadway debut, starring in Nora Ephron's Lucky Guy, for which he was nominated for the Tony Award for Best Actor in a Play.[94]: 761
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 2014, Hanks' short story "Alan Bean Plus Four" was published in the October 27 issue of The New Yorker.[95] Revolving around four friends who make a voyage to the moon, the short story is titled after the Apollo 12 astronaut Alan Bean. Slate magazine's Katy Waldman found Hanks' first published short story "mediocre", writing that "Hanks' shopworn ideas about technology might have yet sung if they hadn't been wrapped in too-clever lit mag-ese".[96] In an interview with The New Yorker, Hanks said he has always been fascinated by space. He told the magazine that he built plastic models of rockets when he was a child and watched live broadcasts of space missions back in the 1960s.[97]: 692
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In March 2015, Hanks appeared in the Carly Rae Jepsen music video for "I Really Like You", lip-syncing most of the song's lyrics as he goes through his daily routine.[98] His next film was the Steven Spielberg-directed historical drama Bridge of Spies, in which he played lawyer James B. Donovan who negotiated for the release of pilot Francis Gary Powers by the Soviet Union in exchange for KGB spy Rudolf Abel. It was released in October 2015 to a positive reception.[99] In April 2016, Hanks starred as Alan Clay in the comedy-drama A Hologram for the King, an adaptation of the 2012 novel of the same name.[100] It's the second time he was directed by Tom Tykwer after Cloud Atlas in 2012.[101]: 698
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks starred as airline captain Chesley Sullenberger in Clint Eastwood's Sully, which was released in September 2016.[102] He next reprised his role as Robert Langdon in Inferno (2016),[103] and co-starred alongside Emma Watson in the 2017 science fiction drama The Circle.[104] He voiced David S. Pumpkins in The David S. Pumpkins Animated Halloween Special, which aired October 28, 2017, on NBC, a character he had portrayed in episodes of Saturday Night Live.[105]: 468
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Upcoming: 8
UpdateRowCalled
updRow: Hanks will reprise his voice role as Sheriff Woody in Pixar's Toy Story 4, set for release on June 21, 2019.[106][107] Then, Hanks will portray Fred Rogers in Marielle Heller's biographical film A Beautiful Day in the Neighborhood. The film will be released on November 22, 2019, by Sony Pictures.[108][109] Hanks will then star as Commander Ernest Krause in Greyhound, a war film to be directed by Aaron Schneider. The film is slated for release on May 8, 2020, by Sony Pictures.[110][111]: 490
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In October 2017, Hanks signed on to star as Finch, the last surviving man on Earth, in the science fiction drama BIOS. Principal production commenced in February 2019. The film is set to be released on October 2, 2020 by Universal Pictures.[112][113][114] In February 2019, Hanks was cast in News of the World, to be his second collaboration with director Paul Greengrass. Additional casting was in the works.[115]: 414
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: HBO confirmed in January 2013 that it was developing a third World War II miniseries based on the book Masters of the Air by Donald L. Miller with Hanks and Spielberg to follow Band of Brothers and The Pacific.[116] Few details have emerged about the project since, but NME reported in March 2017 that production was progressing under the working title The Mighty Eighth.[117]: 376
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Personal life: 13
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks and wife Rita Wilson at the 1989 Oscars: 45
UpdateRowCalled
updRow: Hanks was married to American actress Samantha Lewes from 1978. They had one son, actor Colin Hanks (born 1977),[118] and one daughter, Elizabeth Hanks (born 1982).[8]: 167
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 1981, Hanks met actress Rita Wilson on the set of TV comedy Bosom Buddies (1980–1982). They were reunited in 1985 on the set of Volunteers.[8]: 147
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks and Samantha Lewes divorced in 1987.[8][119]: 50
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks married Wilson in 1988. They have two sons. The oldest, Chester Marlon "Chet" Hanks, had a minor role as a student in Indiana Jones and the Kingdom of the Crystal Skull and released a rap song in 2011.[120] Their youngest, Truman Theodore, was born in 1995.[121]: 268
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Before marrying Wilson, Hanks converted to the Greek Orthodox Church, the religion of Wilson and her family.[122][123] He said, "I must say that when I go to church—and I do go to church—I ponder the mystery. I meditate on the 'why?' of 'why people are as they are' and 'why bad things happen to good people,' and 'why good things happen to bad people' ... The mystery is what I think is, almost, the grand unifying theory of all mankind."[21]: 447
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: On October 7, 2013, on The Late Show with David Letterman, Hanks announced that he has Type 2 diabetes.[124]: 108
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Politics and activism: 21
UpdateRowCalled
updRow: Hanks supports same-sex marriage, environmental causes, and alternative fuels. He has donated to many Democratic politicians, and during the 2008 United States presidential election uploaded a video to his MySpace account endorsing Barack Obama.[125] He also narrated a 2012 documentary, The Road We've Traveled, created by Obama for America.[126] In 2016, Hanks endorsed Hillary Clinton in the 2016 presidential election.[127]: 427
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks was outspoken about his opposition to the 2008 Proposition 8, an amendment to the California constitution that defined marriage as a union only between a man and a woman. Hanks and others raised over US$44 million to campaign against the proposition, in contrast to the supporters' $39 million,[128] but Proposition 8 passed with 52% of the vote.[129] It was overruled in June 2013, when the Ninth Circuit lifted its stay of the district court's ruling, enabling Governor Jerry Brown to order same-sex marriage officiations to resume.[130] While premiering a TV series in January 2009, Hanks called supporters of Proposition 8 "un-American" and criticized the LDS Church members, who were major proponents of the bill, for their views on marriage and role in supporting the bill.[131][132] About a week later, he apologized for the remark, saying that nothing is more American than voting one's conscience.[133]: 917
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: A proponent of environmentalism, Hanks is an investor in electric vehicles and owns a Toyota RAV4 EV and the first production AC Propulsion eBox. He was a lessee of an EV1 before it was recalled, as chronicled in the documentary Who Killed the Electric Car?[134] He was on the waiting list for an Aptera 2 Series.[135]: 318
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks serves as campaign chair of the Hidden Heroes Campaign of the Elizabeth Dole Foundation. The stated mission of the campaign is to inspire a national movement to more effectively support the military and veteran caregivers.[136][137]: 238
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 2004, while touring the White House, Hanks learned that the press corps did not have a coffee pot, and shortly thereafter he donated an espresso machine. He again donated new machines in 2010 and 2017. His 2017 donation was accompanied by a note that read "To the White House Press Corps, Keep up the good fight for Truth, Justice, and the American Way. Especially for the truth part."[138][139]: 398
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Other activities: 16
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks with Steven Spielberg at the National World War II Memorial in March 2010: 79
UpdateRowCalled
updRow: A supporter of NASA's manned space program, Hanks said he originally wanted to be an astronaut. Hanks is a member of the National Space Society, serving on the Board of governors of the nonprofit educational space advocacy organization founded by Wernher von Braun.[140] He also produced the HBO miniseries From the Earth to the Moon about the Apollo program to send astronauts to the moon. In addition, Hanks co-wrote and co-produced Magnificent Desolation: Walking on the Moon 3D, an IMAX film about the moon landings.[141] Hanks provided the voice-over for the premiere of the show Passport to the Universe at the Rose Center for Earth and Space in the Hayden Planetarium at the American Museum of Natural History in New York.[142]: 734
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 2006, the Space Foundation awarded Hanks the Douglas S. Morrow Public Outreach Award,[143] given annually to an individual or organization that has made significant contributions to public awareness of space programs.[144]: 225
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In June 2006, Hanks was inducted as an honorary member of the United States Army Rangers Hall of Fame for his accurate portrayal of a captain in the movie Saving Private Ryan; Hanks, who was unable to attend the induction ceremony, was the first actor to receive such an honor. In addition to his role in Saving Private Ryan, Hanks was cited for serving as the national spokesperson for the World War II Memorial Campaign, for being the honorary chairperson of the D-Day Museum Capital Campaign, and for his role in writing and helping to produce the Emmy Award–winning miniseries, Band of Brothers.[145] On March 10, 2008, Hanks was on hand at the Rock and Roll Hall of Fame to induct The Dave Clark Five.[146]: 713
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks is a collector of manual typewriters and uses them almost daily.[147][148] In August 2014, Hanks released Hanx Writer, an iOS app meant to emulate the experience of using a typewriter; within days the free app reached number one on the App Store.[149][150]: 262
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Writings: 8
UpdateRowCalled
updRow: In November 2014, Hanks said he would publish a collection of short stories inspired by his typewriter collection.[151] The book, Uncommon Type, was published in 2017.: 167
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Uncommon Type (New York: Knopf, October 17, 2017)[152]: 54
UpdateRowCalled
updRow: Legacy: 6
UpdateRowCalled
updRow: Hanks is perceived to be amiable and congenial to his fans. He has frequently been referred to as "America's Dad".[153] In 2013, when he was starring in Nora Ephron's Lucky Guy on Broadway, he had crowds of 300 fans waiting for a glimpse of him after every performance. This is the highest number of expectant fans post-show of any Broadway performance.[154]: 358
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks is ranked as the fourth highest all-time box office star in North America, with a total gross of over $4.5 billion at the North American box office, an average of $100.8 million per film.[3] Worldwide, his films have grossed over $9.0 billion.[155]: 254
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Asteroid 12818 Tomhanks is named after him.[156]: 48
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: As of January 2019, Hanks is currently voted #1 on Ranker's "The Best Actors in Film History".[157]: 99
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Awards: 6
UpdateRowCalled
updRow: Main article: List of awards and nominations received by Tom Hanks: 66
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Hanks receiving the 2016 Presidential Medal of Freedom: 54
UpdateRowCalled
updRow: 2006: Douglas S. Morrow Public Outreach Award: 45
UpdateRowCalled
updRow: 2014: Kennedy Center Honors Medallion: 37
UpdateRowCalled
updRow: 2016: Presidential Medal of Freedom[158]: 40
UpdateRowCalled
updRow: 2016: French Legion of Honor, for his presentation of World War II and support of World War II veterans, along with Tom Brokaw, retired NBC anchor, and Gordon H. Mueller, president and co-founder of the National WWII Museum, New Orleans.[159]: 242
UpdateRowCalled
updRow: Other recognition: 17
UpdateRowCalled
updRow: Hanks was the guest on BBC Radio 4's Desert Island Discs (in the footsteps of John Huston, Arthur Rubinstein, Luciano Pavarotti, and more than 2500 other celebrities who were 'castaways' (guests on the show) since 1942) on May 8, 2016, giving a 45-minute interview with insights into his personal life and career.[160][161]: 323
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Bridge of Spies is a 2015 historical drama film directed and co-produced by Steven Spielberg, written by Matt Charman, Ethan and Joel Coen and stars Tom Hanks, Mark Rylance, Amy Ryan, and Alan Alda. Set during the Cold War, the film tells the story of lawyer James B. Donovan, who is entrusted with negotiating the release of Francis Gary Powers—a U.S. Air Force pilot whose U-2 spy plane was shot down over the Soviet Union in 1960—in exchange for Rudolf Abel, a convicted Soviet KGB spy held under the custody of the United States, whom he represented at trial. The name of the film refers to the Glienicke Bridge, which connects Potsdam with Berlin, where the prisoner exchange took place. The film was an international co-production of the United States and Germany.[6]: 777
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Bridge of Spies was shot under the working title of St. James Place. Principal photography began on September 8, 2014, in Brooklyn, New York City, and the production proceeded at Babelsberg Studios in Potsdam. The film was released by Touchstone Pictures on October 16, 2015, in the United States and distributed by 20th Century Fox in other countries.[7] It was a box office success, grossing $165 million worldwide, and was praised for its screenplay, Hanks and Rylance's performances, Spielberg's direction, musical score, and production values. The film received six Academy Award nominations including Best Picture and Best Original Screenplay, and won Best Supporting Actor for Rylance.: 692
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 1957 New York City, Rudolf Abel is arrested and charged with spying for the Soviet Union. Insurance lawyer James B. Donovan is prevailed upon to take on the unenviable task of defending Abel, so that Abel's trial will be seen as fair. Committed to the principle that the accused deserves a vigorous defense, he mounts the best defense of Abel he can, declining along the way to cooperate in the CIA's attempts to induce him to violate the confidentiality of his communications with his client.: 496
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Abel says Donovan reminds him of a friend of his father's who used to visit; "Watch this man," his father said. When State thugs came in and beat his parents and this friend, the friend kept getting to his feet; "Stoikiy muzhik", they said – "Standing man" – and let him live.: 280
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Abel is convicted, but Donovan convinces the judge to spare Abel the death penalty because Abel had been serving his country honorably, and he might prove useful for a future prisoner exchange; Abel is sentenced to 30 years. Donovan appeals the conviction to the Supreme Court based on the lack of a search warrant for the seizure of Abel's ciphers and photography equipment. For his principled stand Donovan and his family are harassed, including shots being fired at their home. The conviction is upheld.: 506
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In 1960, Gary Powers, a pilot in the CIA's top secret U-2 spy plane program, is shot down over the USSR. He is captured and sentenced in a show trial to ten years confinement, including three years in prison.: 208
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Donovan receives a letter from East Germany, purportedly sent by Abel's wife, thanking him and urging him to get in contact with their lawyer, whose name is Vogel. The CIA think this is a back-channel message hinting that the USSR is willing to swap Powers for Abel. They unofficially ask Donovan to go to Berlin to negotiate the exchange; he arrives just as the Berlin Wall is going up. Crossing in to East Berlin, he meets with a KGB officer in the Soviet Embassy and is then directed to Vogel, who represents the Attorney General of the German Democratic Republic (GDR). The Attorney General seeks to swap Abel for an American graduate student named Frederic Pryor, who had been arrested in East Germany; in the process the GDR hopes to gain official recognition by the United States.: 787
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The CIA wants Donovan to forget about Pryor but he insists that both Pryor and Powers be swapped for Abel. In a message to the Attorney General he bluffs that they will either release Pryor with Powers or there will be no deal.: 227
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The exchange of Powers and Abel takes place at the Glienicke Bridge, with Pryor to be released simultaneously at Checkpoint Charlie. Donovan asks Abel what he thinks will happen upon his return to the Soviet Union; Abel answers that his fate – whether he is to be welcomed back as a hero or shot as a traitor – will be obvious from whether he is embraced by the Soviet agents at the end of the bridge or simply shown into the back seat of a car.: 449
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: There is a tense wait for word of Pryor’s release at Checkpoint Charlie. The CIA, still primarily concerned with Powers, tell Abel he can go, but he turns to Donovan and says "Stoikiy muzhik" – "Standing man" – and refuses to move.: 237
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The bluff is successful. It is confirmed that Pryor has been released, and the exchange takes place. Donovan watches as Abel is received by the Soviet agents; he is shown into the back of a car without embrace.: 210
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The next day, back in the United States, the government publicly acknowledges Donovan for negotiating the deal that rehabilitates his public image.: 147
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Cast: 4
UpdateRowCalled
updRow: Tom Hanks as James B. Donovan: 29
UpdateRowCalled
updRow: Mark Rylance as Rudolf Abel: 27
UpdateRowCalled
updRow: Scott Shepherd as Hoffman: 25
UpdateRowCalled
updRow: Amy Ryan as Mary Donovan: 24
UpdateRowCalled
updRow: Sebastian Koch as Wolfgang Vogel: 32
UpdateRowCalled
updRow: Alan Alda as Thomas Watters Jr.: 31
UpdateRowCalled
updRow: Austin Stowell as Francis Gary Powers: 37
UpdateRowCalled
updRow: Billy Magnussen as Doug Forrester: 33
UpdateRowCalled
updRow: Eve Hewson as Carol Donovan: 27
UpdateRowCalled
updRow: Jesse Plemons as Joe Murphy: 27
UpdateRowCalled
updRow: Michael Gaston as Agent Williams: 32
UpdateRowCalled
updRow: Peter McRobbie as Allen Dulles: 30
UpdateRowCalled
updRow: Domenick Lombardozzi as Agent Blasco: 36
UpdateRowCalled
updRow: Will Rogers as Frederic Pryor: 29
UpdateRowCalled
updRow: Dakin Matthews as Judge Mortimer W. Byers: 41
UpdateRowCalled
updRow: Burghart Klaußner as Harald Ott: 32
UpdateRowCalled
updRow: Mikhail Gorevoy as Ivan Alexandrovich Schischkin: 48
UpdateRowCalled
updRow: Stephen Kunken as William F. Tompkins: 37
UpdateRowCalled
updRow: Noah Schnapp as Roger Donovan: 29
UpdateRowCalled
updRow: Production: 10
UpdateRowCalled
updRow: Development: 11
UpdateRowCalled
updRow: Bridge of Spies is an American-German co-production based on a script written by the Coen Brothers and Matt Charman.[8][9] Studio Babelsberg co-produced and oversaw production services for the film.[10] James Donovan wrote an account of the incident in 1964 under the title Strangers on a Bridge: The Case of Colonel Abel and Francis Gary Powers.[11] The historical background to the U-2 incident and the story of former West Berlin CIA chief William King Harvey and Operation Gold was published in Rory MacLean's Berlin: Portrait of a City Through the Centuries (2014).[12] Soviet intelligence officer Rudolf Abel, who lived and operated in Brooklyn Heights, did dead drops of stolen documents in Prospect Park. His arrest and history were discussed by Truman Capote, another Heights resident at the time, in his book A House on the Heights.: 842
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Matt Charman became interested in Donovan's story after reading a footnote about him in An Unfinished Life: John F. Kennedy, 1917–1963.[13] After meeting with Donovan's son in New York City, Charman pitched the story to several studios and DreamWorks bought it. Studio co-founder Steven Spielberg became interested in the film and decided to direct.[14] Marc Platt and Kristie Macosko Krieger attached themselves as producers along with Spielberg. Joel Coen and Ethan Coen revised Matt Charman's original script.[15] According to Charman, the brothers "were able to really punch up the negotiations on the back end of the movie, then they handed the baton back to me to do a pass after they did their pass, to make the movie just sit in a place we all wanted it to. The flavor they brought is so fun and enjoyable. It needed to be entertaining but truthful."[13]: 864
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In May 2014, it was announced that Tom Hanks would star as James Donovan, with Mark Rylance co-starring as Abel. Amy Ryan, Alan Alda, Billy Magnussen, and Eve Hewson were reported to star in the film as well.[16][17] Participant Media co-produced the film.[18] Francis Gary Powers, Jr., founder of The Cold War Museum and the pilot's son, was brought on as a technical consultant and has a cameo in the film.: 408
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In June 2014, Fox 2000 Pictures agreed to co-finance the film with DreamWorks and Participant Media, with the film's distribution rights being divided between Disney and Fox.[19] During a March 3, 2015, interview with The Daily Pennsylvanian, Platt revealed the title to be Bridge of Spies; it was shot under the working title of St. James Place.[20] The film also received funds of €3.7 million, from the German Federal Film Fund (DFFF).[21]: 444
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Filming: 7
UpdateRowCalled
updRow: Principal photography began on September 8, 2014, in Brooklyn, New York City.[22] On September 14, filming took place in DUMBO, a Brooklyn neighborhood, where crews transformed Anchorage Street to appear as it did in the 1960s.[23][24] On September 15, filming took place in Astoria, between Astoria Park and Ditmars Boulevard. Filming was done on 18 Street and 26 Avenue in Astoria, where Spielberg was spotted transforming the 5 Corners Deli into a 1950s grocery store.[25][26][27] On September 26, filming took place on 44th Street in Manhattan, as evidenced by crews stationed on 44th Street, between Madison and 6th Avenues. On September 27, Hanks was spotted filming scenes on Wall Street among extras wearing 1960s costumes.[28] On September 28, filming of some day and night scenes took place on the corner of Henry Street and Love Lane in the Brooklyn Heights neighborhood of Brooklyn, where the block was set with vintage cars, street signs, rain machines, and spotlights.[29] On September 29, filming took place on Hicks Street and Pineapple Street, where a shop, Perfect Paws, was transformed into a 1960s dress shop named Brooklyn Pearl,[30] and at the NYS Appellate Division courthouse on Monroe Place and Pierrepont Street. On October 6, Hanks and the crew were spotted on the same location on Hicks Street.[31] The scene in the Court hallway in which Hanks, to Alda's consternation, announces his intention to appeal the guilty verdict, was filmed on the first floor on the Queens County Supreme Courthouse at 88-11 Sutphin Blvd., Jamaica, New York.: 1565
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In early October, after filming wrapped in New York City, further production began at Babelsberg Studios in Berlin and Potsdam, Germany, and would last there through the end of November.[32][33] Filming in Berlin began with shooting at the former Tempelhof Airport in October, for scenes that actually took place there, such as Donovan's descending from an historic C-54 Skymaster.[34] The prisoner exchange scene was filmed on the Glienicke Bridge (the so-called "Bridge of Spies"), where the historical exchange actually took place in 1962.[35][36] The bridge spans the Havel narrows between Berlin and Potsdam, and was closed to traffic for filming over the last weekend of November.[37][38] German Chancellor Angela Merkel visited the set to watch the filming of these scenes.[39] Principal photography officially ended on December 4, at Berlin Tempelhof. Shooting also took place in Wrocław, Poland, in the second half of November.[32][40] During mid-December, filming took place at Beale Air Force Base, located near Marysville, California.[41] The film was shot on 35mm motion picture film, including Kodak Vision3 250D Color Negative Film 5207 and Vision3 500T Color Negative Film 5219.[42]: 1199
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Glienicke Bridge in Potsdam/Berlin during filming: 49
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:  : 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Period vehicles on Monroe Place in Brooklyn Heights during filming: 66
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow:  : 1
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Sprinklers during filming in Brooklyn Heights: 45
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Historical accuracy: 19
UpdateRowCalled
updRow: Bridge of Spies is based on the real-life events. The film, however, departs from the historical record, though reviewers have praised the film and argued that such departures are permissible.[43] Commentators have noted that the shortening of timespans in the film at times gives a misleading impression.[44][45] One key example is the depiction of the Berlin Wall. Donovan did not see Berlin wall escapees being shot; the shootings most similar to the ones depicted were those associated with the killing of Peter Fechter that happened the summer after the Powers/Abel exchange on the Glienicke Bridge.[44][45][46] Similarly, the circumstances of Frederic Pryor's detention were not accurately portrayed – he could not have crossed a partially built wall,[45][46] and further, was convicted of obtaining "confidential" material.[44]: 836
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Apart from the depiction of the Wall, it is notable that Donovan did not suffer quite the extent of violence depicted: he was not shot at in his home,[44][45] and he did not have his overcoat stolen.[44] The film also changed the location of Donovan's suggestion to the judge to spare Abel for the sake of a possible future exchange, which was in fact made in open court.[43][45]: 379
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Donovan is presented in the film as a private practice attorney with little connection to the government or the intelligence community. In reality however, during WWII Donovan served as the general counsel of the OSS, shortly before it was re-organized as the CIA.[47]: 268
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Abel, an English-born Soviet intelligence officer (whose real name was William G. Fisher) most likely did his best work for the Soviet Union not as a spy in a dishevelled New York City lair full of radio gear, but before and during World War II, when he trained agents and radio operators for clandestine work in German-occupied regions. This training is thought to have been critical to what his mentor, Pavel Sudoplatov, later called one of the most important radio deception operations of the war.[48]: 504
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Frederic Pryor stated in an interview that various details of the plot related to his involvement were incorrect. He did not cross the Berlin wall during its construction, as he was on vacation in Denmark at the time. He was detained after his return, when he crossed into East Berlin to visit a friend's sister; she had fled to West Berlin using "some sort of passport manipulation", and her apartment was under surveillance to catch anyone attempting to retrieve its contents.[49] Pryor also stated that the film's depiction of Wolfgang Vogel was unfair.[49]: 560
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: It is implied that Abel will be shot, since he has not been welcomed. He actually lived on for many years, dying in 1971 at the age of 68. And he had been hailed as a hero in the Soviet press. [50]: 197
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The film depicts the shooting down of Powers' U2 plane as occurring after a single volley of three SAMs, however, more than 14 were launched. A MiG-19 fighter that was scrambled to intercept the plane was also shot down by friendly fire during this salvo, killing the pilot Sergei Safronov.[51]: 294
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Release: 7
UpdateRowCalled
updRow: The theatrical poster for the film was released on June 4, 2015,[52] with the first trailer appearing online the following day.[53] It was distributed in North America by Walt Disney Studios Motion Pictures, through the Touchstone Pictures banner.[54][55] Disney held the film's world premiere on October 4, 2015[56] at the 53rd annual New York Film Festival.[57][58] The film went into general theatrical release in the United States on October 16, 2015.[59] 20th Century Fox distributed the film in the remaining international territories.[54]: 545
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Home media: 10
UpdateRowCalled
updRow: The film was released by Touchstone Home Entertainment on Blu-ray, DVD, and digital download in North America on February 2, 2016 and by 20th Century Fox Home Entertainment in other territories.: 194
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Reception: 9
UpdateRowCalled
updRow: Box office: 10
UpdateRowCalled
updRow: Bridge of Spies grossed $72.3 million in North America and $93.3 million in other territories for a worldwide total of $165.6 million, against a budget of $40 million.[5]: 170
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In the United States and Canada, pre-release tracking predicted Bridge of Spies to open to around $15–20 million from 2,811 theaters.[60][61] The film opened alongside Goosebumps, Crimson Peak, and Woodlawn on October 16, 2015, facing particular competition from the former, and also from The Martian, which was entering its third week.[62] The film made $500,000 from its early Thursday night showings and $5.3 million on its first day.[63][64] In its opening weekend, the film grossed $15.4 million, finishing third at the box office behind Goosebumps ($23.5 million) and The Martian ($21.5 million).[65] Its biggest international markets have been Italy ($12.1 million) and United Kingdom (11.0 million).[66]: 713
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Critical response: 17
UpdateRowCalled
updRow: Bridge of Spies received critical acclaim. Richard Roeper of Chicago Sun Times gave the film four out of four stars and praised Spielberg's direction, saying: "Spielberg has taken an important but largely forgotten and hardly action-packed slice of the Cold War and turned it into a gripping character study and thriller that feels a bit like a John Le Carre adaptation if Frank Capra were at the controls".[67] Michael Phillips of the Chicago Tribune called the film a "a confident, slightly square, highly satisfying example of old-school Hollywood craftsmanship, starring a major movie star brandishing a briefcase, and a handkerchief, rather than a pistol".[68] The A.V. Club's Ignatiy Vishnevetsky described it as "one of the most handsome movies of Spielberg's latter-day phase, and possibly the most eloquent [...] Bridge of Spies turns a secret prisoner exchange between the CIA and the KGB into a tense and often disarmingly funny cat-and-mouse game".[69]: 964
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: On the other hand, Mike Scott of New Orleans Times-Picayune, had a more mixed reaction, saying: "Bridge of Spies, with its stop-and-go momentum, is also more merely interesting than it is full-on riveting. It's still quite good stuff, but despite its impressive pedigree... it doesn't feel as if it's quite the sum of all of its parts".[70] Preston Jones of Fort Worth Star-Telegram gave the film 2 and a half stars out of five. Jones wrote that "For all Spielberg, his star-packed cast, led by Tom Hanks, and his on-screen and off-screen team (Joel and Ethan Coen co-wrote the screenplay) bring to the table, Bridge of Spies is remarkable only for how stuffy and surprisingly inert the film becomes".[71]: 705
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: On Rotten Tomatoes, the film has a rating of 91%, based on 283 reviews, with an average rating of 7.7/10. The site's critical consensus reads, "Bridge of Spies finds new life in Hollywood's classic Cold War espionage thriller formula, thanks to reliably outstanding work from Steven Spielberg and Tom Hanks".[72] On Metacritic, the film has a score of 81 out of 100, based on 48 critics, indicating "universal acclaim".[73] On CinemaScore, audiences gave the film an average grade of "A" on an A+ to F scale.[65]: 512
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Accolades: 9
UpdateRowCalled
updRow: Main article: List of accolades received by Bridge of Spies (film): 66
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Homepage: 8
UpdateRowCalled
updRow: Human Parts: 11
UpdateRowCalled
updRow: BODYMINDHEARTHANDSEYESSOULSMILE: 31
UpdateRowCalled
updRow: Three Magical Phrases to Comfort a Dying Person: 47
UpdateRowCalled
updRow: We will all face painful moments sitting next to dying people. What can we say?: 79
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 10: 6
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Photo: gorodenkoff/Getty Images: 31
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: At 3 p.m. on a Monday afternoon, death announced it was coming for him. He was only eight years old; his cancer cells were not responding to treatment anymore. His body’s leukemic blast cell counts were doubling daily. Bone marrow was no longer making red or white blood cells, not even platelets. The marrow was only churning out cancer cells. In a process similar to churning butter, his blood was thickening with homogenous, malicious content: cancer. And like churning butter, it was exhausting work. The battered remnants of his healthy self were beaten down by chemo. And yet, every fiber pressed on.: 608
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: He was so very tired. You could see it in his eyes. At the same time, you could see his love. His love for life was front and center. His love for sweetness crystalized on his tongue in the taste of sun-soaked strawberries. His love for satisfaction could be heard in the snapping sound of a puzzle piece set in place. His love for the simple, soothing smells of lavender emanating from a medicine ball was cherished, as was the fact that he could still hold a ball in his hands. He loved life down to the core, as only an eight-year-old can, and he was doing everything he could to stay alive.: 594
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Death was easy to detect. It was right under our eyes, sending the simplest of signals. No appetite. Breathing strained. Cold hands and feet, meaning compromised blood flow. Ankles swollen. Standing up was becoming nearly impossible. His body was shutting down. But it was his temperature that told us the landslide of disease was accelerating and about to swallow us whole.: 374
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: At 3 p.m. on a Monday afternoon, his temperature was 107.2 degrees.: 67
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Doctors and nurses clustered outside of his hospital room. The cluster grew. The murmurs increased. My concern intensified. We had spent enough time at the hospital to know when a situation was escalating. I was not surprised when I was quietly summoned out of the room. As the sliding door closed behind me, I found myself in the center of the humming cluster. Bustling, shuffling chaos encircled me. The attending oncologist, at the center of the group, was serious and quiet. She said in a low voice, “Your son is dying. He likely won’t live through another two hours. He won’t make it through the night.”: 616
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: My eight-year-old asleep with his favorite blanket and pillow. Photos: Jenny Harrington: 87
UpdateRowCalled
updRow: Tackled by shock, I couldn’t breathe. I had quarterbacked nearly two years of his cancer treatment. I knew every player and every play. He had an all-star team from the start. Yes, we’d been on the defensive since his leukemic cancer relapse. I fought furiously to get him on a (supposedly) life-saving immunotherapy trial, in which his own immune cells were reprogrammed to attack and destroy cancer cells. Chimeric antigen receptor T cells (CAR T cells) had been his Hail Mary treatment 12 days ago. Now, we were waiting and watching, at the edge of our seats and hospital bed, for them to work their magic. CAR Ts for the win! Wait. Was I hearing, amidst the chaos in the hallway, that our miracle CAR T therapy had failed? Yes. The ball had been fumbled, we were out of plays, and time was up. I was told, “Your son is dying.”: 838
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: There was one person who would be more shocked than me.: 55
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Choking back tears, I took a deep breath, held onto that gulp of air and went back into the room to sit next to my imminently dying child.: 138
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Without a breath, I pushed out the words, “We need to talk.”: 64
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: What do you say to a dying person?: 34
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: A few weeks earlier, on another Monday afternoon, I was lying in bed with my son. It was back before his body hurt too much to be touched. Back when I could still curl up in his hospital bed with him. I whispered, “I love you,” as I often did.: 247
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: He said, “I know.”: 22
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Of course he knew. He knew everything I did was for him. Our beloveds know we love them. We say it. They see it. They know. So, what more can we say? What words can we give them when there is nothing left but words? Especially when words seem like they are failing. And words do fail.: 284
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: There are no words for the time your eight-year-old dies in your arms. Even if there were (and, I promise you, there aren’t), most people will not need them because most people will never be in that situation, unimaginable as it is.: 234
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: But most of us will face other painful moments sitting next to a dying person. How do I know this? Because our mortality rate is 100 percent. One day, we will all be a dying person. And before that, we may be close to several, or to many. We all need to know how to sit and talk through a time for which there are no words. A time when not even an “I love you” will suffice. How do we catch our future selves? How do we comfort our dying loved ones now?: 457
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I slowly let out my held-in breath and said, “I am so sorry to tell you this, but you are going to die.”: 108
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: “Wait — what? I don’t want to die!”: 47
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: He was stunned, furious. His big, crystalline-blue eyes widened. Maybe it was his soft, bald head and the lashless lids framing those eyes, but his blue eyes were all I could see. Added to the mix of love and fatigue, I now saw fear. My mind went on a frantic race to find the right words to cradle and calm him.: 312
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: There are no magic words that can catch and carry and keep a person crossing into the end zone. Words cannot keep a loved one from dying.: 137
UpdateRowCalled
updRow: “I am so sorry. I know. But we are all going to die whether we want to or not. I am going to die. Dad is going to die. We are all going to die and we don’t have any control over it. I am so, so sorry.”: 207
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: “When am I going to die?” he asked. He was, as always, curious and thinking things through.: 95
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: “I don’t know, but soon.”: 31
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: “What?!”: 12
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Anger and disbelief bubbled back up. Does it come as any surprise that he was more shocked than I to hear the news he would be dying soon? He was a child; he believed us with magical wonder when we told him he would get better. Just like he believed us when we promised the Tooth Fairy would exchange his lost tooth for a gift if he tucked it under his pillow. We had assured him he would get better. He had done everything asked of him — every difficult, painful, nauseating thing. And now, my sweet, darling, silly monkey and I were staring wide-eyed at each other, with 100 percent mortality in between.: 612
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Delivering this message was the hardest thing I’ve ever had to do. But I had to stay calm and say more. I had to find impossible words — words that would bridge the gap between life and death and make his predicament palatable. Three phrases welled up that became a touchstone for us in the days that followed. I call them “three magic phrases to comfort a dying person” now. At the time, they were a lifeline of connection for the two of us and for the rest of our family.: 485
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Here is what I said to my distressed, dying child, as lovingly and reassuringly as possible: “You will not be alone. You will not feel pain. We will be okay.” He needed each of these phrases more than “I love you.”: 222
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 1. “You will not be alone.”: 31
UpdateRowCalled
updRow: Letting him know you will not be alone was important because he was human — a social, silly, lovable animal. As the youngest of our four children, he was accustomed to chatter and chaos. From birth, he was playful and craved connection. That’s why he would crawl in bed with me in the middle of the night or ask me to play a game of Sorry or wait patiently for me to read him a story. He especially craved company when he was scared, like on the first day of preschool.: 477
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The first day was only an hour long. The children traced their names on nametags, listened to a story on the rug, and did a craft project. He stayed tucked between my legs, clinging to them when not focused on an activity. Preschool was going to be a blast and he’d make the best of friends, but he didn’t know this yet. All he knew was that everything was new and it scared him.: 383
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Fast-forward to this Monday afternoon when he had just been informed he was going to die. He was heading into the biggest and most unknown of all experiences. He needed to hear he would not be alone.: 199
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 2. “You will not feel pain.”: 32
UpdateRowCalled
updRow: My child had endured a tremendous amount of pain over the past two years. The pain of pressure building up from inside his bones, blooming cancer cells ready to burst out, was one of the first signs. One day, it was suddenly too painful for him to walk. Then there was the pain of treatment, with its constant needle pokes for blood draws, bone marrow biopsies, and spinal taps. Headaches, nausea, and general malaise — having cancer was a literal pain. Not to mention the social and emotional suffering. You will not feel pain was important because he needed to hear that although we could no longer contain the cancer, we could soothe his nerves.: 654
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 3. “We will be okay.”: 25
UpdateRowCalled
updRow: Saying we will be okay was the most important, and the hardest, of the Three Magic Phrases. I simply didn’t believe it. I had a clasping, nearly crushing hold on hope up until the very moment I heard, “Your son is dying.” I thought he would pull through and somehow live the long, glorious, trouble-free life that he deserved. How could I ever hold hope close again? Saying we will be okay was saying the impossible. We are not okay without him. But I had to say it, for him.: 481
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: He cared deeply about others. If I asked, “What movie do you want to watch?” He would often answer, “Whatever movie you want to watch.” In third grade, he had an assignment to choose a cause to support. He chose cancer and he said this cause was meaningful to him because “I want everybody to stay healthy and because I have it [cancer] and I want everyone and myself to get better.” Even in the face of his own mortality, with a life-threatening illness, he was thinking of others. He would not be okay unless he knew we were okay. He loved us beyond measure. We did our best to love him back the same amount.: 622
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: He did not die in the two hours that followed. We called in our closest circle and Skyped with family and friends far away. A beloved babysitter brought in a guitar. The curved, wooden instrument was unclasped from its case. Strummed music floated through the room like butterflies. We sang. Best pals dealt Uno cards. We poured butterbeer, the type Harry Potter would order on a trip to Hogsmeade, into waxed paper cups, passed them out and toasted, “To Ewan!” The hospital even allowed his puppy to come in for a little tail-wagging and a few wet kisses.: 560
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Friends left and night descended. Dad and I tucked in next to him, dimmed the lights and read from Harry Potter and The Half-Blood Prince. I didn’t sleep. Miraculously, he didn’t die that night.: 198
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: On the other side.: 18
UpdateRowCalled
updRow: What followed was a memorable week of playdates and parties. Out-of-town family and friends flew in. We enjoyed an enormous circus-themed party on the hospital’s garden rooftop. There were acrobats, a magician, and a band made of talented elementary school music teachers. His friends wore Hogwarts robes and superhero costumes. Everyone ate chocolate cake, sang, danced, and celebrated his life like there was no tomorrow.: 425
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: All week long, I repeated, “You will not be alone. You will not feel pain. We will be okay.”: 96
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: There are no magic words that can catch and carry and keep a person crossing into the end zone. Words cannot keep a loved one from dying. The morphine drip increases in strength and frequency. Exactly one week later, holding my hand, he died. I died that day, too. There are no words that fill in for his silenced silly and cherished company. I feel incredibly alone. It is unimaginably painful. That’s when I repeat the Three Magic Phrases in reverse order. We will be okay. You will not feel pain. You will not be alone. I feel myself caught in the arms of my beloved child. Now, I am not alone. Then, the pain eases. I will be okay. This is the beauty of the Three Magic Phrases: dying people live on as long as we go on remembering them, and repeating the phrases we said to them is a very direct connection. Our loved ones catch us, daily, and keep us going. And in turn, when it’s our time, I hold onto hope that we too will find comfort in a few magic phrases.: 971
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: DeathLoveHealthParentingHeart: 29
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Author, researcher, mother living on an island near Seattle. Now, notably, an international bunny smuggler. Find her struggles and snuggles at www.teamewan.com: 159
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Human Parts: 11
UpdateRowCalled
updRow: Human Parts: 11
UpdateRowCalled
updRow: What it means to be.: 20
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: More from Human Parts: 21
UpdateRowCalled
updRow: A Gentlemen’s Guide To Rape Culture: 37
UpdateRowCalled
updRow: Go to the profile of Zaron Burnett III: 38
UpdateRowCalled
updRow: Zaron Burnett III: 17
UpdateRowCalled
updRow: May 29, 2014: 12
UpdateRowCalled
updRow: More from Human Parts: 21
UpdateRowCalled
updRow: Coming Out as Biracial: 22
UpdateRowCalled
updRow: Go to the profile of Stephanie Georgopulos: 42
UpdateRowCalled
updRow: Stephanie Georgopulos: 21
UpdateRowCalled
updRow: Oct 21, 2013: 12
UpdateRowCalled
updRow: More from Human Parts: 21
UpdateRowCalled
updRow: The Girl at the Bar: 19
UpdateRowCalled
updRow: Go to the profile of Snippets: 29
UpdateRowCalled
updRow: Snippets: 8
UpdateRowCalled
updRow: Oct 15, 2017: 12
UpdateRowCalled
updRow: Responses: 9
UpdateRowCalled
updRow: Amit Singh: 10
UpdateRowCalled
updRow: Write a response…: 19
UpdateRowCalled
updRow: Amit Singh: 10
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Jacqueline Dooley: 38
UpdateRowCalled
updRow: Jacqueline Dooley: 17
UpdateRowCalled
updRow: Mar 12: 6
UpdateRowCalled
updRow: I’m so sorry. Thank you for sharing these much-needed words of advice. Your story is heartbreaking and honest…and all-too familiar. My last words to my daughter were, “It’s okay to go.” I think that helped her let go just as your loving words helped your son.: 269
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 12: 6
UpdateRowCalled
updRow: “It’s okay to go.” Heartbreaking. Our loved ones love us so much they want our permission. Bravo for being able to give big, beautiful motherly acceptance — so much grace right there.: 195
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Midge James: 32
UpdateRowCalled
updRow: Midge James: 11
UpdateRowCalled
updRow: Mar 12: 6
UpdateRowCalled
updRow: Thank you for such a poignant and heartbreaking story. Thank you for your courage in telling your son he was dying. Thank you for raising such a splendid soul for all of his 8 years. Thank you for your courage and vulnerability.: 228
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 13: 6
UpdateRowCalled
updRow: Thank you for reading and being willing to remember him with me.: 64
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between Peter Boyd and Jenny Harrington.: 53
UpdateRowCalled
updRow: Go to the profile of Peter Boyd: 31
UpdateRowCalled
updRow: Peter Boyd: 10
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: This is one of the most beautiful pieces of writing on death that I’ve ever read — and I’ve read a few since we lost our Dad to cancer a little over two years ago. I clicked on the link thinking “I have a couple of minutes between tasks and would love to have those three phrases in my backpocket” as I didn’t think I had them to hand when I said…: 365
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 16: 6
UpdateRowCalled
updRow: “You can smile because they lived” wow, Peter, the David Harkin’s poem adaptation is powerful. Ewan had the brown blanket pictured since birth. Oddly, his oncologist’s 8-year-old had the exact same blanket. The HP pillow had been brought back from London by one of his friends. We were going to take him to London, last summer, before he relapsed. I’ve…: 365
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Scott Selliers: 35
UpdateRowCalled
updRow: Scott Selliers: 14
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: I was just reading this in bed while laying next to my wife; I was crying hard enough that I had to sneak out of the room for fear of waking her and having to explain. I just came back into the house after turning your words over in my mind while out on the porch listening to the wind and spring frogs. On the way to write this response to you and…: 351
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: I hear the wind and spring frogs. We were lucky/unlucky enough to be able to ask Ewan what signs he would give us that he is still here. A sunset, a rustle of leaves through the wind, a rainbow, a moth by the door…? He only smiled. I think of it as a hidden pictures game he is playing- it’s my job to seek and be open to his constant connection…: 352
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Sanjiva Weerawarana: 40
UpdateRowCalled
updRow: Sanjiva Weerawarana: 19
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: Thank you for writing this.: 27
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I lost my father exactly 3 months ago today and I was there with him but didn’t know what to say as he was dying, nor could I voice any words.: 144
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: You’re incredible for what you did.: 37
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: Thank you for your kind words. Today, someone said to me “even when we don’t say anything we are still communicating.” Its beautiful and true. It might be, “I don’t know what to say” or “this moment is too big for words” but you were there. Your presence said all that was needed.: 296
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Kathy Hussey: 33
UpdateRowCalled
updRow: Kathy Hussey: 12
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: Saying we will be okay was the most important, and the hardest, of the Three Magic Phrases. I simply didn’t believe it. I had a clasping, nearly crushing hold on hope up until the ve...: 187
UpdateRowCalled
updRow: As a Mother of 4, now adult, children I can only imagine how completely impossible it was for you to say to your son “We will be okay.” Yet you said it, and not once, but many, many times that week. I am utterly in awe of your strength and love for your child .That you were able to set aside your own needs at that moment, and during the next week to…: 358
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: You know what its like when you love someone way, way more than yourself. He made it so easy to love him that way. The day before he died — I can’t begin to describe how dire and sick his condition was, and yet, he played catch with his four-year-old cousin using a large bouncy ball, the $2 kind from the grocery store. He smiled and was having fun…: 360
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Dr. Jerry Green: 36
UpdateRowCalled
updRow: Dr. Jerry Green: 15
UpdateRowCalled
updRow: Mar 14: 6
UpdateRowCalled
updRow: I can appreciate your view. I also appreciate “as long as there is life there is hope”. From Stephen Hawkings who lived with ALS for many years. Reversals, rallies, cures, new treatments, alternative treatments, recoveries.: 227
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: That’s a poignant point of view. We never ever gave up. Even on his last night, I insisted they give him his second treatment of Inotuzumab. We hoped for a miracle and held hands just in case one didn’t come through.: 220
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Concepcion Gasang: 38
UpdateRowCalled
updRow: Concepcion Gasang: 17
UpdateRowCalled
updRow: Mar 14: 6
UpdateRowCalled
updRow: Thank you for sharing your story. It will really help when time comes for us in the same situation. You are courageous!: 119
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: Thank you for your kind, thoughtful words.: 42
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of Romario Eichlig: 36
UpdateRowCalled
updRow: Romario Eichlig: 15
UpdateRowCalled
updRow: Mar 16: 6
UpdateRowCalled
updRow: I waited for a plot twist and didn’t come so now my night is ruined…: 72
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Anyway, I’m here to congratulate for how “dutiful” you were those last; as someone with a high cancer risk ratio, I’m often caught thinking how I’ll help others deal with it more than I’d would deal with cancer itself, so the phrase “we’ll be ok” made…: 272
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 16: 6
UpdateRowCalled
updRow: I waited right with you and hoped and bargained and wailed… mine’s ruined, too. And every night since. Now, when I smile or crack a joke or light up inside for even a minute, I feel off. We won’t be great, but we might be ok. Thank you for your honest words. They somehow help.: 283
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Jenny Harrington.: 35
UpdateRowCalled
updRow: Go to the profile of kat kilcullen: 34
UpdateRowCalled
updRow: kat kilcullen: 13
UpdateRowCalled
updRow: Mar 15: 6
UpdateRowCalled
updRow: I feel grateful to have read this, to you for using your gifts to so beautifully capture and share these moments with us. I will hold your words with me. Thank you. This is is a story I choose to keep.: 201
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Jenny Harrington: 37
UpdateRowCalled
updRow: Jenny Harrington: 16
UpdateRowCalled
updRow: Mar 16: 6
UpdateRowCalled
updRow: I am honored. Thank you for reading and remembering Ewan.: 57
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 3: 1
UpdateRowCalled
updRow: 2: 1
UpdateRowCalled
updRow: 1: 1
UpdateRowCalled
updRow: Read smarter, not harder.: 25
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Why I Deleted All My Social Media Accounts: 42
UpdateRowCalled
updRow: Sometimes there’s an upside to a public meltdown: 50
UpdateRowCalled
updRow: Go to the profile of Felicia C. Sullivan: 40
UpdateRowCalled
updRow: Felicia C. Sullivan: 19
UpdateRowCalled
updRow: Mar 6: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Illustration: osker14/Getty Images: 34
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Some people are built to break. Others know how to collect the pieces and rebuild. Often I exist in the space between the two.: 126
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Last year, I deleted Facebook. A few weeks ago, I retired my Instagram account. Recently, I deleted my Twitter account, where I had nearly 6,000 followers. Peers are apoplectic because who deletes their social media? Friends wonder how I’ll keep up with them, and more importantly, what will I do without Facebook alerting me of their birthdays? Apparently, these are very important questions. The questions of our time.: 422
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: A friend tells me I’ve isolated myself—what she doesn’t understand is that the act of removing the social burdens we bear is fucking liberating.: 150
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Maybe we should ask ourselves: When did we become lazy in our relationships? When did we start relying on platforms that own our information to do the work of conversation and connection? When did it become abnormal to not have a social media presence?: 252
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Honestly, I’ve grown tired of measuring the depth of my connection with the world based on how I was posting carefully curated and edited information about my life. People bemoan the fakeness of social media in pursuit of the real, but they don’t actually want real. More positivity in posts means higher follower counts; people want to follow those who don’t share much negativity, and that’s a fact. Funny how we talk about the plastic nature of social media as if it were a thing removed from us. As if social media were an entity we didn’t actively shape and participate in. As if we aren’t the people perpetuating this false reality—regardless whether we’re conscious of it.: 695
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The knowledge that people saw my pain and didn’t seem to care enough to reach out was worse than the actual cause of my anxiety.: 130
UpdateRowCalled
updRow: Because everyone loves a happy ending, a triumphant comeback story.: 67
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I’m good at using language to disguise my wounds. I’ve spent the greater part of 35 years talking about how love and loss are flip sides of the same coin. The line between the two is indecipherable. I published two books about women who lived in a constant state of dressing their wounds. I write essays that are cryptic and poetic and people clap and say, “damn that was pretty,” before they up and leave.: 414
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Depression is tricky for someone like me who’s obsessed with control. Once I think I have my illness figured out, it changes form. Often, I exist in the space between being frightened of death and welcoming it. I hate flying on planes and riding in fast cars, but I’ll warm to the weight of 30 or 40 pills in my hand before I slide them back in the bottle.: 360
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I saw a post in a hate forum about a friend I know. We are acquaintances who share a certain level of intimacy because we’ve courted death and can speak plainly about it. We trade bad jokes about suicide and laugh because it’s a way of coping, a way of setting down the weight that threatens to swallow us whole. And the people with their anonymous and clever usernames cut into her because of how she handled seeking treatment for her illness. She wasn’t supposed to say anything on social media—she wasn’t supposed to speak at all. She was supposed to disappear and deal with it because that’s how they would have handled it.: 639
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: People who aren’t sick would have us stay silent if they had their way, and yet out of the other side of their mouths, they’ll prattle on about “breaking the stigma” and wishing that people who suffer would “get the help they need.” Their empathy chorus is hollow and grating because they believe a binary exists—you either want to die or you don’t—and they see only a singular way of handling mental illness. Call the hotlines. Go offline. Seek therapy. Take your meds. Go to yoga. Collect crystals. Go on that juice diet everyone raves about. Or maybe keto? Be humble. Take your medicine. Don’t cry publicly. Don’t humiliate yourself. Tape your mouth shut. Swallow whatever voice you have left. Don’t complain about the people telling you to call the hotlines. Don’t get angry at the people who don’t know what to say, as if any of us should settle for scraps. Don’t let the healthy bear any of the weight of our sickness. Smile and speak in exclamation points! Use appropriate emojis.: 1017
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Don’t make the healthy feel uncomfortable because god-fucking-forbid.: 71
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: But here’s the reality: Those of us who are mentally ill are going to act mentally ill because we’re human and we hurt in the worst way. We aren’t going to make the best choices or know how to talk about our illness publicly because we’re human. And we’re forever existing under the burden of being instructed by those who are not ill on how to behave. They keep telling us how to live.: 396
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: And, oh, do we have to behave.: 30
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Not too long ago, I posted a series of stories on my private Instagram. I had just recovered from an anxiety attack, returned from urgent care, and was heavily medicated. I talked about my stress in a series of videos and while hundreds of my “friends” watched them, only three actually reached out. The knowledge that people saw my pain and didn’t seem to care enough to reach out was worse than the actual cause of my anxiety.: 434
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: A few weeks later, I did the same on Twitter and was immediately ashamed. I knew why I did it—I wanted to open my mouth and scream but it felt as if no sound came out. I didn’t want to die, but the hurt was so palpable and constant. Our bodies are designed to handle only so much pain. What happens with the overflow? Where does the pain go? Are we forced to contain it until we shudder and burst? A few kind friends followed up and I was grateful for their love and friendship. Two reported my posts to Twitter, and I received a form letter about “reaching out” and “getting help” as if people who have depression don’t already know these things. The irony was that I was reaching out, but apparently, my pain was too much for others to witness. That form letter was yet another piece of duct tape affixed to my mouth. Others unfollowed me and didn’t care at all.: 880
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I have work to do, but I’ve decided much of it is best done offline.: 70
UpdateRowCalled
updRow: Friendships are tenuous and their upkeep is hard. I realized that people’s tolerance for anxiety and depression comes with a best-by date.: 140
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I’m in a much better place now because I deleted all of my social media and decided to do a lot of work offline. I’m keeping in touch with the people I care about without relying on social media to tell me the goings-on in their lives. Luckily, I don’t need social media for the kind of work I do, with the exception of possibly LinkedIn and my work accounts, all of which I’ll maintain for professional purposes. However, I’m deciding to keep a lot of my personal life offline with the exception of sharing the occasional essay and chatting with my newsletter subscribers.: 583
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: The act of being vulnerable, laying yourself out, is painful when the collective response is an uncomfortable silence. We all need to be honest with what we tolerate versus what we say we tolerate. Perhaps compassion has its limits. Granted, I have work to do, but I’ve decided much of it is best done offline.: 312
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Right now, I’m not in danger. I don’t want to die, but I’ve wanted to not exist. I’ve wanted to fall out of the frame, curl up and recede. I wanted to say those words out loud because my body feels like a container and there’s only so much pain I can take before I burst and break. I want to feel less pain but that doesn’t necessarily mean I’m uncapping prescription pills with abandon.: 401
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Yet any signs of mental illness and—snap—let’s report those posts so the depressed are greeted by form emails with numbers to call and websites to visit. As if people don’t already fucking know. As if so many of us don’t want to call the numbers just yet, but we just want to be seen and loved and unburdened of our unfathomable sadness. But—snap—let’s set off the five-alarm fires. Snap—let’s treat you like the spectacle you are, the “sick” person. The “crazy” person. Let’s usher out our condescending platitudes and you should reach out if you want help but we’ll shut you down when you reach out because god forbid we feel uncomfortable. God forbid we realize depression is more complicated than Twitter would have us believe.: 763
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: People with depression and mental illness are not sideshow attractions here for your hair-petting and amusement. If you don’t know how to deal with someone with depression, ask a professional. Open a browser and Google it. Put in some effort.: 244
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: We’re not here for your condescension. We’re not here to bear the weight of your myopic thinking, platitudes, and binary perception. We are here for your kindness, compassion, and support.: 192
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: We are here for one simple sentence: I love you, I care about you, and how can I help?: 86
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Sign up for my newsletter.: 26
UpdateRowCalled
updRow: Mental HealthPsychologySocial MediaDigital LifeMind: 51
UpdateRowCalled
updRow: Go to the profile of Felicia C. Sullivan: 40
UpdateRowCalled
updRow: Felicia C. Sullivan: 19
UpdateRowCalled
updRow: Medium member since Jan 2018: 28
UpdateRowCalled
updRow: Published Novelist. Brand/Marketing Strategist. lovelifeeatny@gmail.com Newsletter: https://bit.ly/2WLyZmv Hire me: https://bit.ly/2UIadlm I have opinions.: 155
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Human Parts: 11
UpdateRowCalled
updRow: Human Parts: 11
UpdateRowCalled
updRow: What it means to be.: 20
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: More from Human Parts: 21
UpdateRowCalled
updRow: A Gentlemen’s Guide To Rape Culture: 37
UpdateRowCalled
updRow: Go to the profile of Zaron Burnett III: 38
UpdateRowCalled
updRow: Zaron Burnett III: 17
UpdateRowCalled
updRow: May 29, 2014: 12
UpdateRowCalled
updRow: More from Human Parts: 21
UpdateRowCalled
updRow: Coming Out as Biracial: 22
UpdateRowCalled
updRow: Go to the profile of Stephanie Georgopulos: 42
UpdateRowCalled
updRow: Stephanie Georgopulos: 21
UpdateRowCalled
updRow: Oct 21, 2013: 12
UpdateRowCalled
updRow: More from Human Parts: 21
UpdateRowCalled
updRow: The Girl at the Bar: 19
UpdateRowCalled
updRow: Go to the profile of Snippets: 29
UpdateRowCalled
updRow: Snippets: 8
UpdateRowCalled
updRow: Oct 15, 2017: 12
UpdateRowCalled
updRow: Responses: 9
UpdateRowCalled
updRow: Amit Singh: 10
UpdateRowCalled
updRow: Write a response…: 19
UpdateRowCalled
updRow: Amit Singh: 10
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Kofi Martin: 32
UpdateRowCalled
updRow: Kofi Martin: 11
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: apoplectic: 10
UpdateRowCalled
updRow: Word choice = FIRE. Definitely had to look that up. /Extremely indignant./: 74
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between Eric Sangerma and Felicia C. Sullivan.: 59
UpdateRowCalled
updRow: Go to the profile of Eric Sangerma: 34
UpdateRowCalled
updRow: Eric Sangerma: 13
UpdateRowCalled
updRow: Feb 28: 6
UpdateRowCalled
updRow: Thanks for writing this piece Felicia.: 38
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I applaud you for opening up the way you did. We need more voices such as yours speaking against Social Media.: 110
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Imagine the impact on fragile teenagers!!! I’ve got 2 kids (Ages 9 and 7) and there is no way I’m buying them a smartphone or letting them opening a social media account anytime soon: 186
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Felicia C. Sullivan: 40
UpdateRowCalled
updRow: Felicia C. Sullivan: 19
UpdateRowCalled
updRow: Feb 28: 6
UpdateRowCalled
updRow: Thanks, Eric! Have you read Cal Newport’s Digital Minimalism? It’s excellent and has great anecdotes about parents setting examples for their kids.: 151
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Eric Sangerma: 34
UpdateRowCalled
updRow: Eric Sangerma: 13
UpdateRowCalled
updRow: Mar 2: 5
UpdateRowCalled
updRow: Hi Felicia, I haven’t but it’s definitely on my list. I loved his previous book, Deep Work.: 95
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Thanks again.: 13
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Julia E Hubbel: 35
UpdateRowCalled
updRow: Julia E Hubbel: 14
UpdateRowCalled
updRow: Mar 8: 5
UpdateRowCalled
updRow: they don’t actually want real.: 32
UpdateRowCalled
updRow: Bingo. Because real and authentic tends to bring up what is real and authentic in ourselves. That is a well we have a terrible time peering into these days.: 156
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between David Avitabile and Felicia C. Sullivan.: 61
UpdateRowCalled
updRow: Go to the profile of David Avitabile: 36
UpdateRowCalled
updRow: David Avitabile: 15
UpdateRowCalled
updRow: Mar 6: 5
UpdateRowCalled
updRow: Thank you Felicia. I feel exactly the same way. I deleted my Facebook account because I woke up one day and realised that the majority of my ‘friends’ were people from high school who I actually never liked in the first place. There’s also a culture of bullshit propagation that platforms like LinkedIn are infested with. The U.S. has installed a felon…: 361
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Felicia C. Sullivan: 40
UpdateRowCalled
updRow: Felicia C. Sullivan: 19
UpdateRowCalled
updRow: Mar 6: 5
UpdateRowCalled
updRow: Agreed! I think we can all use a little breathing room right now.: 65
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between Tiffany Lopez and Felicia C. Sullivan.: 59
UpdateRowCalled
updRow: Go to the profile of Tiffany Lopez: 34
UpdateRowCalled
updRow: Tiffany Lopez: 13
UpdateRowCalled
updRow: Mar 2: 5
UpdateRowCalled
updRow: I’m good at using language to disguise my wounds.: 51
UpdateRowCalled
updRow: Wow. That statement was deep. I felt that one.: 46
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Felicia C. Sullivan: 40
UpdateRowCalled
updRow: Felicia C. Sullivan: 19
UpdateRowCalled
updRow: Mar 2: 5
UpdateRowCalled
updRow: Thanks, Tiffany! :): 19
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Anitra Root: 32
UpdateRowCalled
updRow: Anitra Root: 11
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: Right now, I’m not in danger. I don’t want to die, but I’ve wanted to not exist: 85
UpdateRowCalled
updRow: Right to my heart with this, as boy oh boy have I been there. I couldn’t explain how I felt. This is it.: 106
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Thank you!: 10
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of vexboxx: 28
UpdateRowCalled
updRow: vexboxx: 7
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: People who aren’t sick would have us stay silent if they had their way, and yet out of the other side of their mouths, they’ll prattle on about “breaking the stigma” and wishing that...: 193
UpdateRowCalled
updRow: And my absolute favourite: “Just cheer up!”: 47
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Thanks, I hadn’t thought of that.: 35
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Mitchell Jordan: 36
UpdateRowCalled
updRow: Mitchell Jordan: 15
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: I am now going to delete my social media accounts, but not until I share this amazing article to explain why.: 109
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Julia E Hubbel: 35
UpdateRowCalled
updRow: Julia E Hubbel: 14
UpdateRowCalled
updRow: Mar 8: 5
UpdateRowCalled
updRow: Don’t make the healthy feel uncomfortable because god-fucking-forbid: 70
UpdateRowCalled
updRow: This begs a question: if they ARE healthy (and by this I mean mentally, emotionally, spiritually) why is being uncomfortable a problem? Precisely. Nobody is lala all the time. We all carry sewage. We all bear scars. To deny them incites sickness. To get angry at others for making us look hard at ourselves is a symptom.: 320
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Nikita Mélusine: 37
UpdateRowCalled
updRow: Nikita Mélusine: 16
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: Wow. This was so raw. I get what you mean about people wanting you to “reach out”… But not being willing to extend a hand. Because they don’t know how. Because the second they catch a glimpse of your pain, they realize they don’t know how to deal with it.: 265
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Koni Lightmaker: 36
UpdateRowCalled
updRow: Koni Lightmaker: 15
UpdateRowCalled
updRow: Mar 1: 5
UpdateRowCalled
updRow: act of removing the social burdens we bear is fucking liberating.: 65
UpdateRowCalled
updRow: Yes. It’s really good.: 24
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between Ivan Galanin and Felicia C. Sullivan.: 58
UpdateRowCalled
updRow: Go to the profile of Ivan Galanin: 33
UpdateRowCalled
updRow: Ivan Galanin: 12
UpdateRowCalled
updRow: Feb 27: 6
UpdateRowCalled
updRow: Thank you for being so bold. Your imperfection is inspiring.: 60
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Felicia C. Sullivan: 40
UpdateRowCalled
updRow: Felicia C. Sullivan: 19
UpdateRowCalled
updRow: Feb 27: 6
UpdateRowCalled
updRow: Ivan,: 5
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Thank you for your kind response and the read. I really appreciate it.: 70
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Cheers, Felicia: 15
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Ivan Galanin: 33
UpdateRowCalled
updRow: Ivan Galanin: 12
UpdateRowCalled
updRow: Feb 27: 6
UpdateRowCalled
updRow: I mean it.: 10
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: For Christmas, my wife adopted two large dogs, brother and sister, victims of divorce. She thought that taking care of them would be good for me. The boy is easy to love. He listens better, doesn’t bark or whine, loves to run. The girl is difficult. She pees where she shouldn’t, whines, barks at the neighbors, has…: 322
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Kofi Martin: 32
UpdateRowCalled
updRow: Kofi Martin: 11
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: Their empathy chorus is hollow and grating because they believe a binary exists—you either want to die or you don’t—and they see only a singular way of handling mental illness.: 182
UpdateRowCalled
updRow: HOLLOW EMPATHY CHORUS. Okay? That shade was served with unlimited tea. Come through sistah-girl. READ.: 102
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Anita Sophia: 33
UpdateRowCalled
updRow: Anita Sophia: 12
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: Often I exist in the space between the two.: 43
UpdateRowCalled
updRow: 🙋🏻‍♀️: 17
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Blue Fences: 32
UpdateRowCalled
updRow: Blue Fences: 11
UpdateRowCalled
updRow: Feb 28: 6
UpdateRowCalled
updRow: I too, have cut my social platforms down to Medium. Congrats 💙: 65
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Obinna Morton: 34
UpdateRowCalled
updRow: Obinna Morton: 13
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: Wow. I gave you 24 claps. I’ve never done that. It was a heart-centered response. So….I don’t know you I know. So all the better — it’s kind of like a FB post you see of someone who does share something personal, a reach-out post and you still reply. I am a person who replies actually because I do know what it’s like to, as you said, share your pain…: 370
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Sans Def: 29
UpdateRowCalled
updRow: Sans Def: 8
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: Dont look back. I took the same sort of progression away from social media over the last two years and it’s just gotten better and better ever since. Best decision ever and now I have so much more space in my life.: 216
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Less than a decade ago we had none of this in our lives. Once you step out you realise how abstract it all is.: 110
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Applause from Felicia C. Sullivan (author): 42
UpdateRowCalled
updRow: Go to the profile of Jeff Allen: 31
UpdateRowCalled
updRow: Jeff Allen: 10
UpdateRowCalled
updRow: Mar 7: 5
UpdateRowCalled
updRow: I talked about my stress in a series of videos and while hundreds of my “friends” watched them, only three actually reached out.: 132
UpdateRowCalled
updRow: I had the same experience when I posted a short story I wrote about my friend’s suicide. It was haunting to know that so few people really cared and couldn’t be bothered with reaching out. Social media has definitely reinforced our tendency to bury our heads in the sand when faced with the darker side of life.: 315
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 3: 1
UpdateRowCalled
updRow: 2: 1
UpdateRowCalled
updRow: 1: 1
UpdateRowCalled
updRow: 0: 1
UpdateRowCalled
updRow: Some thoughts are worth more than a penny.: 42
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Build a simple Twitter Bot with Node.js in just 38 lines of code: 64
UpdateRowCalled
updRow: Tutorials don’t have to be complicated. Together we’ll build a simple Twitter favorite bot with Node.js in just 38 lines of code.: 133
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: May 30, 2017: 12
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Twitter! via unsplash.me: 24
UpdateRowCalled
updRow: This is the first post in a multi-part series. In future posts, I’ll show you how to add more advanced functionality to our bot. For now, we’re going to build a very simple Twitter bot that favorites anyone who tweets about a certain subject.: 246
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: EDIT — Part 2 has been posted: Build a simple Node.js Twitter Bot Part 2: Do More. To stay up to date on future articles, please enter your email here if you’d like to be added to my once-weekly email list.: 214
UpdateRowCalled
updRow: Before we get started, all of the code for this tutorial can be found in my GitHub Repository: 93
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Ready? Let’s do it. Here’s what we’re going to need:: 58
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Twitter API: If you have a Twitter account, you can utilize the Twitter API. You can read the API Documentation here.: 117
UpdateRowCalled
updRow: Node.js: Visit the official Node.js website to download and install Node if you haven’t already. Looking for a more in-depth tutorial? Check out my Top Three Node.js courses.: 176
UpdateRowCalled
updRow: Twitter NPM: An NPM module that allows to easily interact with the Twitter API.: 79
UpdateRowCalled
updRow: Create an Application: 21
UpdateRowCalled
updRow: First thing’s first: The only reason this bot will work is because of the Twitter API. On the most basic of levels an API is simply a way for one program to interact with another. We’ll be creating a Node.js application that interacts with the Twitter API. In this application, the API will allow us to search for tweets, and favorite the tweets that our application finds.: 377
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: To use the Twitter API, we need some information! Head on over to the Twitter API and create a new application.: 111
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Here’s what the page should look like.: 40
UpdateRowCalled
updRow: You’ll have to fill out some information, then look for the following information under the Keys and Access Tokens tab. You may have to click Generate Access Token to create your access token.: 194
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Consumer Key: 12
UpdateRowCalled
updRow: Consumer Secret: 15
UpdateRowCalled
updRow: Access Token Key: 16
UpdateRowCalled
updRow: Access Token Secret: 19
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Keys and Access Tokens: 22
UpdateRowCalled
updRow: Once you see these four pieces of information, you’re ready to move on to the next section.: 93
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Configuration: 13
UpdateRowCalled
updRow: Now that we have the application information we need, lets set up our bot.: 74
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Create an empty directory named twitter-bot and run:: 52
UpdateRowCalled
updRow: npm init: 8
UpdateRowCalled
updRow: 2. Fill out the required information to initialize our project.: 63
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Here’s what my package.json file looked like after initializing my project. Note: Yours may look slightly different, that’s OK.: 131
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: {: 1
UpdateRowCalled
updRow:   "name": "twitter-bot",: 24
UpdateRowCalled
updRow:   "version": "1.0.0",: 21
UpdateRowCalled
updRow:   "description": "Nodejs Twitter Bot",: 38
UpdateRowCalled
updRow:   "main": "app.js",: 19
UpdateRowCalled
updRow:   "scripts": {: 14
UpdateRowCalled
updRow:     "test": "echo \"Error: no test specified\" && exit 1": 57
UpdateRowCalled
updRow:   },: 4
UpdateRowCalled
updRow:   "repository": {: 17
UpdateRowCalled
updRow:     "type": "git",: 18
UpdateRowCalled
updRow:     "url": "git+https://github.com/bmorelli25/Twitter-Bot.git": 62
UpdateRowCalled
updRow:   },: 4
UpdateRowCalled
updRow:   "author": "Brandon Morelli",: 30
UpdateRowCalled
updRow:   "license": "ISC",: 19
UpdateRowCalled
updRow:   "bugs": {: 11
UpdateRowCalled
updRow:     "url": "https://github.com/bmorelli25/Twitter-Bot/issues": 61
UpdateRowCalled
updRow:   },: 4
UpdateRowCalled
updRow:   "homepage": "https://github.com/bmorelli25/Twitter-Bot#readme": 64
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: 3. Next, we’ll save our one needed dependency by running:: 59
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: npm install --save twitter: 26
UpdateRowCalled
updRow: 4. Create two files, config.js and app.js: 41
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Our config.js file will store the configuration information. The app.js file will contain our twitter bot code.: 111
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: 5. Let’s add the twitter application information from above to our config.js file. Replace each of the blanks below with your corresponding app data that you got from Twitter.: 177
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: // config.js: 12
UpdateRowCalled
updRow: module.exports = {: 18
UpdateRowCalled
updRow:   consumer_key: '',: 19
UpdateRowCalled
updRow:   consumer_secret: '',: 22
UpdateRowCalled
updRow:   access_token_key: '',: 23
UpdateRowCalled
updRow:   access_token_secret: '': 25
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: 6. We can now require our two dependencies in our app.js file:: 62
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: // app.js: 9
UpdateRowCalled
updRow: var Twitter = require('twitter');: 33
UpdateRowCalled
updRow: var config = require('./config.js');: 36
UpdateRowCalled
updRow: 7. Now that we have all the puzzle pieces, it’s time to bring everything together. We do this by passing our configuration details into Twitter. Add the following code to app.js: 179
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: var T = new Twitter(config);: 28
UpdateRowCalled
updRow: At this point we have our configuration all set up. Our application details (which are necessary to interact with the Twitter API) are being passed into the npm module Twitter. This npm module simplifies the process of interacting with Twitter’s API. Now we can make get and post requests to the API which is what allows us to ‘do things’ on Twitter via our bot!: 368
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Build the Bot: 13
UpdateRowCalled
updRow: Remember, we’re starting very simple with this tutorial. Let’s visualize the flow of favoriting a tweet: There are two parts. First, you search for Tweets, then you select one and favorite it. Lets work on the search functionality first:: 241
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: We’re going to set up a params variable which will house our search parameters. There are a lot of parameters we can use. You can see the full list on Twitter’s API documentation here.: 188
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: var Twitter = require('twitter');: 33
UpdateRowCalled
updRow: var config = require('./config.js');: 36
UpdateRowCalled
updRow: var T = new Twitter(config);: 28
UpdateRowCalled
updRow: // Set up your search parameters: 32
UpdateRowCalled
updRow: var params = {: 14
UpdateRowCalled
updRow:   q: '#nodejs',: 15
UpdateRowCalled
updRow:   count: 10,: 12
UpdateRowCalled
updRow:   result_type: 'recent',: 24
UpdateRowCalled
updRow:   lang: 'en': 12
UpdateRowCalled
updRow: }: 1
UpdateRowCalled
updRow: q is the only required parameter and it stores our search query. In my example we’re searching for tweets containing #nodejs. Feel free to change this to whatever query you’d like.: 184
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: I also use three optional search parameters:: 44
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: count — specify the number of tweets you’d like to return: 65
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: result_type: 'recent' — returns only the most recent results: 66
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: lang: 'en' — returns only English results: 47
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Now that we have our search parameters we plug them into a get request so we can find some tweets!: 98
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: T.get('search/tweets', params, function(err, data, response) {: 62
UpdateRowCalled
updRow:   if(!err){: 11
UpdateRowCalled
updRow:     // This is where the magic will happen: 42
UpdateRowCalled
updRow:   } else {: 10
UpdateRowCalled
updRow:     console.log(err);: 21
UpdateRowCalled
updRow:   }: 3
UpdateRowCalled
updRow: }): 2
UpdateRowCalled
updRow: To gain a deep understanding of what is happening here, you’ll need to read the Twitter API Documentation on GET search/tweets, but I’ll try and provide a basic introduction:: 178
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: With the help of the npm Twitter module, we are able to make a get request to ‘search/tweets’ and pass in our search params we set previously. This get request returns a callback. If there is no error in this callback, we will run our code to favorite a tweet. If there is an error, we will log the error and be done.: 321
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Awesome, so now we just need some code to add into our if(!err) statement above!: 80
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Our get request is returning an array of multiple tweets via the data.statuses object. So we need to loop through all of the tweets in that array and favorite each one individually. Here’s how we do that:: 206
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: // Loop through the returned tweets: 35
UpdateRowCalled
updRow:     for(let i = 0; i < data.statuses.length; i++){: 50
UpdateRowCalled
updRow:       // Get the tweet Id from the returned data: 48
UpdateRowCalled
updRow:       let id = { id: data.statuses[i].id_str }: 46
UpdateRowCalled
updRow:       // Try to Favorite the selected Tweet: 43
UpdateRowCalled
updRow:       T.post('favorites/create', id, function(err, response){: 61
UpdateRowCalled
updRow:         // If the favorite fails, log the error message: 55
UpdateRowCalled
updRow:         if(err){: 16
UpdateRowCalled
updRow:           console.log(err[0].message);: 38
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:         // If the favorite is successful, log the url of the tweet: 66
UpdateRowCalled
updRow:         else{: 13
UpdateRowCalled
updRow:           let username = response.user.screen_name;: 51
UpdateRowCalled
updRow:           let tweetId = response.id_str;: 40
UpdateRowCalled
updRow:           console.log('Favorited: ', `https://twitter.com/${username}/status/${tweetId}`): 89
UpdateRowCalled
updRow:         }: 9
UpdateRowCalled
updRow:       });: 9
UpdateRowCalled
updRow:     }: 5
UpdateRowCalled
updRow: We create a for loop and loop each and every tweet (until we’ve reached the length of data.statuses).: 103
UpdateRowCalled
updRow: Inside our for loop we capture the tweet id using data.statuses[i].id_str . We need this id for our post request.: 113
UpdateRowCalled
updRow: We run a post request to favorites/create. This is the API route that is used to favorite a tweet. We pass in our tweet id, and the request returns a callback.: 159
UpdateRowCalled
updRow: In our callback we look for an error. If there is an error, we log out the error message. Most of the time the error message will occur because we are trying to favorite a tweet that we have already favorited.: 209
UpdateRowCalled
updRow: If there is no error, the bot will favorite the tweet! As an added bonus, I use the returned object to construct the url of the newly favorited tweet. This url is then logged to the console making it easy to see which tweets the bot has favorited.: 247
UpdateRowCalled
updRow: Run your bot!: 13
UpdateRowCalled
updRow: It’s done! Run your bot in the command line with node app.js: 62
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: That’s it! Watch in glory as your bot favorites and logs each tweet url out!: 78
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Full Code: 9
UpdateRowCalled
updRow: Here’s what the full app.js file looks like. I also have all the code on my GitHub, so head over there if you want a way to easily download and play with the bot!: 164
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Coming Soon: 11
UpdateRowCalled
updRow: Here’s a list of possible enhancements and additions we can make to our twitter bot. What do you want to learn? Tweet me @BrandonMorelli to let me know and I’ll cover it in Part 2 of this series! Also, I publish a few articles and tutorials each week, please consider entering your email here if you’d like to be added to my once-weekly email list.: 354
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Add retweet functionality: 25
UpdateRowCalled
updRow: Reply to tweets on a certain subject/hashtag: 44
UpdateRowCalled
updRow: Reply to users if they follow you: 33
UpdateRowCalled
updRow: Follow Bot: 10
UpdateRowCalled
updRow: Run the bot on a server (instead of locally): 44
UpdateRowCalled
updRow: ❤ If this post was helpful, please hit the little green heart!: 64
UpdateRowCalled
updRow: If tutorials like this interest you and you want to learn more, check out my 5 Best Courses for Learning Full Stack Web Development, or my Three awesome courses for learning Node.js.: 182
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: NodejsWeb DevelopmentJavaScriptTwitterBots: 42
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Medium member since Aug 2017: 28
UpdateRowCalled
updRow: Creator of @codeburstio — Frequently posting web development tutorials & articles. Follow me on Twitter too: @BrandonMorelli: 126
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: codeburst: 9
UpdateRowCalled
updRow: codeburst: 9
UpdateRowCalled
updRow: Bursts of code to power through your day. Web Development articles, tutorials, and news.: 88
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: More from codeburst: 19
UpdateRowCalled
updRow: React Hooks, First Impressions: 30
UpdateRowCalled
updRow: Go to the profile of John Tucker: 32
UpdateRowCalled
updRow: John Tucker: 11
UpdateRowCalled
updRow: Feb 17: 6
UpdateRowCalled
updRow: More from codeburst: 19
UpdateRowCalled
updRow: React/Redux/React-Router Private Route Alternative: 50
UpdateRowCalled
updRow: Go to the profile of Chris D’Ascoli: 37
UpdateRowCalled
updRow: Chris D’Ascoli: 16
UpdateRowCalled
updRow: Feb 14: 6
UpdateRowCalled
updRow: More from codeburst: 19
UpdateRowCalled
updRow: How to make gradients in iOS using Swift: 40
UpdateRowCalled
updRow: Go to the profile of Yogesh Manghnani: 37
UpdateRowCalled
updRow: Yogesh Manghnani: 16
UpdateRowCalled
updRow: Feb 20: 6
UpdateRowCalled
updRow: Responses: 9
UpdateRowCalled
updRow: Amit Singh: 10
UpdateRowCalled
updRow: Write a response…: 19
UpdateRowCalled
updRow: Amit Singh: 10
UpdateRowCalled
updRow: Conversation between Matthew Woodard and Brandon Morelli.: 57
UpdateRowCalled
updRow: Go to the profile of Matthew Woodard: 36
UpdateRowCalled
updRow: Matthew Woodard: 15
UpdateRowCalled
updRow: Jun 1, 2017: 11
UpdateRowCalled
updRow: Great tutorial, thanks!: 23
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: Glad you enjoyed it Matthew. Part two is out now as well:: 57
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Build a simple Twitter Bot with Node.js Part 2: DO MORE: 55
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In case you missed it, recently I published Build a simple Twitter Bot with Node.js in just 38 lines of code. A lot of…: 121
UpdateRowCalled
updRow: hackernoon.com	: 16
UpdateRowCalled
updRow: Conversation between Aboobakkar P S and Brandon Morelli.: 56
UpdateRowCalled
updRow: Go to the profile of Aboobakkar P S: 35
UpdateRowCalled
updRow: Aboobakkar P S: 14
UpdateRowCalled
updRow: May 31, 2017: 12
UpdateRowCalled
updRow: very interesting article for tech enthusiasts!.: 47
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: Thanks! Glad you enjoyed it. I just released the second article in the series which will show you how to do a lot more with the Twitter API and this bot:: 153
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between Calpa Liu and Brandon Morelli.: 51
UpdateRowCalled
updRow: Go to the profile of Calpa Liu: 30
UpdateRowCalled
updRow: Calpa Liu: 9
UpdateRowCalled
updRow: Jun 11, 2017: 12
UpdateRowCalled
updRow: Great! Can I translate it into Chinese and then share in the Chinese programmers community?: 91
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 12, 2017: 12
UpdateRowCalled
updRow: Yes, definitely! Just please include a link back to my original article: 71
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between Alex Z. and Brandon Morelli.: 49
UpdateRowCalled
updRow: Go to the profile of Alex Z.: 28
UpdateRowCalled
updRow: Alex Z.: 7
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: Terrific tutorial and bot. Thank you!: 37
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: Thanks Alex! Part two is out now which walks through a lot more options with the bot:: 85
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Build a simple Twitter Bot with Node.js Part 2: DO MORE: 55
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: In case you missed it, recently I published Build a simple Twitter Bot with Node.js in just 38 lines of code. A lot of…: 121
UpdateRowCalled
updRow: hackernoon.com	: 16
UpdateRowCalled
updRow: Conversation between Mauro Daprotis and Brandon Morelli.: 56
UpdateRowCalled
updRow: Go to the profile of Mauro Daprotis: 35
UpdateRowCalled
updRow: Mauro Daprotis: 14
UpdateRowCalled
updRow: May 31, 2017: 12
UpdateRowCalled
updRow: Great Post! Would love a follow bot guide in the future, thanks!: 64
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: Thanks for the response! I think this will be next on the list!: 63
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Brandon Morelli.: 34
UpdateRowCalled
updRow: Go to the profile of Denis Savchuk: 34
UpdateRowCalled
updRow: Denis Savchuk: 13
UpdateRowCalled
updRow: Jun 19, 2017: 12
UpdateRowCalled
updRow: Looks like you don’t know about callback hell…: 50
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 19, 2017: 12
UpdateRowCalled
updRow: Eh, it’s one nested callback. I think people will live: 56
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Brandon Morelli.: 34
UpdateRowCalled
updRow: Go to the profile of Avani Martins: 34
UpdateRowCalled
updRow: Avani Martins: 13
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: how do i create and install the package.json: 44
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: You have to use the command prompt.: 35
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: If you run npm init in the command prompt, you will be asked a series of questions. By answering these questions, your package.json is automatically created.: 157
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Brandon Morelli.: 34
UpdateRowCalled
updRow: Go to the profile of Schalavadi: 31
UpdateRowCalled
updRow: Schalavadi: 10
UpdateRowCalled
updRow: May 31, 2017: 12
UpdateRowCalled
updRow: Hi good evening, good article ! In the above post, you annotated bot.js. Should it read app.js?: 95
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: Thanks so much for pointing that out. I fixed it!: 49
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation with Brandon Morelli.: 34
UpdateRowCalled
updRow: Go to the profile of Obed Tetteh: 32
UpdateRowCalled
updRow: Obed Tetteh: 11
UpdateRowCalled
updRow: Jun 16, 2017: 12
UpdateRowCalled
updRow: Brandon Morelli how do i share my code with you so you can check my errors. i seem to have the same invalid or expired token problem…thank you: 144
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 16, 2017: 12
UpdateRowCalled
updRow: Hey man, do you use github at all? Can you upload to a repo there? Otherwise, codepen.io might work. Create a new pen and copy your code in there then I can test it on my end.: 175
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: Conversation between Mauro Daprotis and Brandon Morelli.: 56
UpdateRowCalled
updRow: Go to the profile of Mauro Daprotis: 35
UpdateRowCalled
updRow: Mauro Daprotis: 14
UpdateRowCalled
updRow: Great Post! Would love a follow bot guide in the future, thanks!: 64
UpdateRowCalled
updRow: Go to the profile of Brandon Morelli: 36
UpdateRowCalled
updRow: Brandon Morelli: 15
UpdateRowCalled
updRow: Jun 2, 2017: 11
UpdateRowCalled
updRow: Hey Mauro, just released a second article in the series that will show you how to put together a basic follow bot:: 114
UpdateRowCalled
updRow: : 0
UpdateRowCalled
updRow: https://hackernoon.com/build-a-simple-twitter-bot-with-node-js-part-2-do-more-2ef1e039715d: 90
cxTorx: 0

cx rx = 0 0
cxTorx: 0

cx rx = 0 0
cxTorx: 0

cx rx = 0 0
cxTorx: 0

cx rx = 0 0
cxTorx: 0

cx rx = 0 0
cxTorx: 0

cx rx = 0 0
cxTorx: 0

cx rx = 0 0
